{"id": "2510.08576", "categories": ["cs.SE", "cs.AI", "cs.CL", "cs.HC"], "pdf": "https://arxiv.org/pdf/2510.08576", "abs": "https://arxiv.org/abs/2510.08576", "authors": ["Justus Flerlage", "Alexander Acker", "Odej Kao"], "title": "Comparative Analysis of Large Language Models for the Machine-Assisted Resolution of User Intentions", "comment": null, "summary": "Large Language Models (LLMs) have emerged as transformative tools for natural\nlanguage understanding and user intent resolution, enabling tasks such as\ntranslation, summarization, and, increasingly, the orchestration of complex\nworkflows. This development signifies a paradigm shift from conventional,\nGUI-driven user interfaces toward intuitive, language-first interaction\nparadigms. Rather than manually navigating applications, users can articulate\ntheir objectives in natural language, enabling LLMs to orchestrate actions\nacross multiple applications in a dynamic and contextual manner. However,\nextant implementations frequently rely on cloud-based proprietary models, which\nintroduce limitations in terms of privacy, autonomy, and scalability. For\nlanguage-first interaction to become a truly robust and trusted interface\nparadigm, local deployment is not merely a convenience; it is an imperative.\nThis limitation underscores the importance of evaluating the feasibility of\nlocally deployable, open-source, and open-access LLMs as foundational\ncomponents for future intent-based operating systems. In this study, we examine\nthe capabilities of several open-source and open-access models in facilitating\nuser intention resolution through machine assistance. A comparative analysis is\nconducted against OpenAI's proprietary GPT-4-based systems to assess\nperformance in generating workflows for various user intentions. The present\nstudy offers empirical insights into the practical viability, performance\ntrade-offs, and potential of open LLMs as autonomous, locally operable\ncomponents in next-generation operating systems. The results of this study\ninform the broader discussion on the decentralization and democratization of AI\ninfrastructure and point toward a future where user-device interaction becomes\nmore seamless, adaptive, and privacy-conscious through locally embedded\nintelligence."}
{"id": "2510.08609", "categories": ["cs.SE", "cs.CR", "cs.LG", "cs.PL"], "pdf": "https://arxiv.org/pdf/2510.08609", "abs": "https://arxiv.org/abs/2510.08609", "authors": ["Imranur Rahman", "Jill Marley", "William Enck", "Laurie Williams"], "title": "Which Is Better For Reducing Outdated and Vulnerable Dependencies: Pinning or Floating?", "comment": "Accepted to ASE 2025", "summary": "Developers consistently use version constraints to specify acceptable\nversions of the dependencies for their project. \\emph{Pinning} dependencies can\nreduce the likelihood of breaking changes, but comes with a cost of manually\nmanaging the replacement of outdated and vulnerable dependencies. On the other\nhand, \\emph{floating} can be used to automatically get bug fixes and security\nfixes, but comes with the risk of breaking changes. Security practitioners\nadvocate \\emph{pinning} dependencies to prevent against software supply chain\nattacks, e.g., malicious package updates. However, since \\emph{pinning} is the\ntightest version constraint, \\emph{pinning} is the most likely to result in\noutdated dependencies. Nevertheless, how the likelihood of becoming outdated or\nvulnerable dependencies changes across version constraint types is unknown. The\ngoal of this study is to aid developers in making an informed dependency\nversion constraint choice by empirically evaluating the likelihood of\ndependencies becoming outdated or vulnerable across version constraint types at\nscale. In this study, we first identify the trends in dependency version\nconstraint usage and the patterns of version constraint type changes made by\ndevelopers in the npm, PyPI, and Cargo ecosystems. We then modeled the\ndependency state transitions using survival analysis and estimated how the\nlikelihood of becoming outdated or vulnerable changes when using \\emph{pinning}\nas opposed to the rest of the version constraint types. We observe that among\noutdated and vulnerable dependencies, the most commonly used version constraint\ntype is \\emph{floating-minor}, with \\emph{pinning} being the next most common.\nWe also find that \\emph{floating-major} is the least likely to result in\noutdated and \\emph{floating-minor} is the least likely to result in vulnerable\ndependencies."}
{"id": "2510.08610", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.08610", "abs": "https://arxiv.org/abs/2510.08610", "authors": ["Imranur Rahman", "Md Rayhanur Rahman"], "title": "Relative Positioning Based Code Chunking Method For Rich Context Retrieval In Repository Level Code Completion Task With Code Language Model", "comment": "Accepted to Context Collection Workshop co-located with ASE 2025", "summary": "Code completion can help developers improve efficiency and ease the\ndevelopment lifecycle. Although code completion is available in modern\nintegrated development environments (IDEs), research lacks in determining what\nmakes a good context for code completion based on the information available to\nthe IDEs for the large language models (LLMs) to perform better. In this paper,\nwe describe an effective context collection strategy to assist the LLMs in\nperforming better at code completion tasks. The key idea of our strategy is to\npreprocess the repository into smaller code chunks and later use syntactic and\nsemantic similarity-based code chunk retrieval with relative positioning. We\nfound that code chunking and relative positioning of the chunks in the final\ncontext improve the performance of code completion tasks."}
{"id": "2510.08612", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08612", "abs": "https://arxiv.org/abs/2510.08612", "authors": ["Devang Dhanuka"], "title": "Impact of LLMs on Team Collaboration in Software Development", "comment": null, "summary": "Large Language Models (LLMs) are increasingly being integrated into software\ndevelopment processes, with the potential to transform team workflows and\nproductivity. This paper investigates how LLMs affect team collaboration\nthroughout the Software Development Life Cycle (SDLC). We reframe and update a\nprior study with recent developments as of 2025, incorporating new literature\nand case studies. We outline the problem of collaboration hurdles in SDLC and\nexplore how LLMs can enhance productivity, communication, and decision-making\nin a team context. Through literature review, industry examples, a team survey,\nand two case studies, we assess the impact of LLM-assisted tools (such as code\ngeneration assistants and AI-powered project management agents) on\ncollaborative software engineering practices. Our findings indicate that LLMs\ncan significantly improve efficiency (by automating repetitive tasks and\ndocumentation), enhance communication clarity, and aid cross-functional\ncollaboration, while also introducing new challenges like model limitations and\nprivacy concerns. We discuss these benefits and challenges, present research\nquestions guiding the investigation, evaluate threats to validity, and suggest\nfuture research directions including domain-specific model customization,\nimproved integration into development tools, and robust strategies for ensuring\ntrust and security."}
{"id": "2510.08619", "categories": ["cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.08619", "abs": "https://arxiv.org/abs/2510.08619", "authors": ["Tennison Liu", "Silas Ruhrberg Est√©vez", "David L. Bentley", "Mihaela van der Schaar"], "title": "Hypothesis Hunting with Evolving Networks of Autonomous Scientific Agents", "comment": null, "summary": "Large-scale scientific datasets -- spanning health biobanks, cell atlases,\nEarth reanalyses, and more -- create opportunities for exploratory discovery\nunconstrained by specific research questions. We term this process hypothesis\nhunting: the cumulative search for insight through sustained exploration across\nvast and complex hypothesis spaces. To support it, we introduce AScience, a\nframework modeling discovery as the interaction of agents, networks, and\nevaluation norms, and implement it as ASCollab, a distributed system of\nLLM-based research agents with heterogeneous behaviors. These agents\nself-organize into evolving networks, continually producing and peer-reviewing\nfindings under shared standards of evaluation. Experiments show that such\nsocial dynamics enable the accumulation of expert-rated results along the\ndiversity-quality-novelty frontier, including rediscoveries of established\nbiomarkers, extensions of known pathways, and proposals of new therapeutic\ntargets. While wet-lab validation remains indispensable, our experiments on\ncancer cohorts demonstrate that socially structured, agentic networks can\nsustain exploratory hypothesis hunting at scale."}
{"id": "2510.08700", "categories": ["cs.CR", "cs.DC"], "pdf": "https://arxiv.org/pdf/2510.08700", "abs": "https://arxiv.org/abs/2510.08700", "authors": ["Zhuolun Li", "Haluk Sonmezler", "Faiza Shirazi", "Febin Shaji", "Tymoteusz Mroczkowski", "Dexter Lardner", "Matthew Alain Camus", "Evangelos Pournaras"], "title": "Are Voters Willing to Collectively Secure Elections? Unraveling a Practical Blockchain Voting System", "comment": null, "summary": "Ensuring ballot secrecy is critical for fair and trustworthy electronic\nvoting systems, yet achieving strong secrecy guarantees in decentralized,\nlarge-scale elections remains challenging. This paper proposes the concept of\ncollectively secure voting, in which voters themselves can opt in as secret\nholders to protect ballot secrecy. A practical blockchain-based collectively\nsecure voting system is designed and implemented. Our design strikes a balance\nbetween strong confidentiality guarantees and real-world applicability. The\nproposed system combines threshold cryptography and smart contracts to ensure\nballots remain confidential during voting, while all protocol steps remain\ntransparent and verifiable. Voters can use the system without prior blockchain\nknowledge through an intuitive user interface that hides underlying complexity.\nTo evaluate this approach, a user testing is conducted. Results show a high\nwillingness to act as secret holders, reliable participation in share release,\nand high security confidence in the proposed system. The findings demonstrate\nthat voters can collectively maintain secrecy and that such a practical\ndeployment is feasible."}
{"id": "2510.08640", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08640", "abs": "https://arxiv.org/abs/2510.08640", "authors": ["Ha Min Son", "Huan Ren", "Xin Liu", "Zhe Zhao"], "title": "Automating Android Build Repair: Bridging the Reasoning-Execution Gap in LLM Agents with Domain-Specific Tools", "comment": null, "summary": "Android is the largest mobile platform, yet automatically building\napplications remains a practical challenge. While Large Language Models (LLMs)\nshow promise for code repair, their use for fixing Android build errors remains\nunderexplored. To address this gap, we first introduce AndroidBuildBench, a\nbenchmark of 1,019 build failures curated from the commit histories of 43\nopen-source Android projects. Each problem is paired with a verified solution\nfrom a subsequent commit, ensuring that fixes are feasible. Second, we propose\nGradleFixer, an LLM agent with domain-specific tools for inspecting and\nmanipulating the Gradle build environment. GradleFixer achieves a resolve rate\nof 81.4% (pass@1), significantly outperforming a state-of-the-art coding agent\nthat relies on a general-purpose shell. GradleFixer's success suggests that\nwhile LLMs possess the high-level knowledge to solve these failures, they\nstruggle to translate this knowledge into effective low-level actions using a\ngeneral-purpose shell. We demonstrate the effectiveness of a strategy we term\nTool Bridging, which replaces general-purpose shell commands with domain-aware\nabstractions. We hypothesize this approach works through two mechanisms: 1) it\nprovides tools in an API-like format that LLMs use more reliably, and 2) it\nconstrains the action space to relevant operations. This approach bridges the\ngap between the model's high-level reasoning and effective low-level execution."}
{"id": "2510.08671", "categories": ["cs.AI", "cs.CL"], "pdf": "https://arxiv.org/pdf/2510.08671", "abs": "https://arxiv.org/abs/2510.08671", "authors": ["Milon Bhattacharya", "Milan Kumar"], "title": "Optimizing delivery for quick commerce factoring qualitative assessment of generated routes", "comment": null, "summary": "Indias e-commerce market is projected to grow rapidly, with last-mile\ndelivery accounting for nearly half of operational expenses. Although vehicle\nrouting problem (VRP) based solvers are widely used for delivery planning,\ntheir effectiveness in real-world scenarios is limited due to unstructured\naddresses, incomplete maps, and computational constraints in distance\nestimation. This study proposes a framework that employs large language models\n(LLMs) to critique VRP-generated routes against policy-based criteria, allowing\nlogistics operators to evaluate and prioritise more efficient delivery plans.\nAs a illustration of our approach we generate, annotate and evaluated 400 cases\nusing large language models. Our study found that open-source LLMs identified\nrouting issues with 79% accuracy, while proprietary reasoning models achieved\nreach upto 86%. The results demonstrate that LLM-based evaluation of\nVRP-generated routes can be an effective and scalable layer of evaluation which\ngoes beyond beyond conventional distance and time based metrics. This has\nimplications for improving cost efficiency, delivery reliability, and\nsustainability in last-mile logistics, especially for developing countries like\nIndia."}
{"id": "2510.08725", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2510.08725", "abs": "https://arxiv.org/abs/2510.08725", "authors": ["Gorjan Alagic", "Chen Bai", "Christian Majenz", "Kaiyan Shi"], "title": "Post-Quantum Security of Block Cipher Constructions", "comment": null, "summary": "Block ciphers are versatile cryptographic ingredients that are used in a wide\nrange of applications ranging from secure Internet communications to disk\nencryption. While post-quantum security of public-key cryptography has received\nsignificant attention, the case of symmetric-key cryptography (and block\nciphers in particular) remains a largely unexplored topic. In this work, we set\nthe foundations for a theory of post-quantum security for block ciphers and\nassociated constructions. Leveraging our new techniques, we provide the first\npost-quantum security proofs for the key-length extension scheme FX, the\ntweakable block ciphers LRW and XEX, and most block cipher encryption and\nauthentication modes. Our techniques can be used for security proofs in both\nthe plain model and the quantum ideal cipher model. Our work takes significant\ninitial steps in establishing a rigorous understanding of the post-quantum\nsecurity of practical symmetric-key cryptography."}
{"id": "2510.08664", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08664", "abs": "https://arxiv.org/abs/2510.08664", "authors": ["Jianan Mu", "Mingyu Shi", "Yining Wang", "Tianmeng Yang", "Bin Sun", "Xing Hu", "Jing Ye", "Huawei Li"], "title": "Faver: Boosting LLM-based RTL Generation with Function Abstracted Verifiable Middleware", "comment": null, "summary": "LLM-based RTL generation is an interesting research direction, as it holds\nthe potential to liberate the least automated stage in the current chip design.\nHowever, due to the substantial semantic gap between high-level specifications\nand RTL, coupled with limited training data, existing models struggle with\ngeneration accuracy. Drawing on human experience, design with verification\nhelps improving accuracy. However, as the RTL testbench data are even more\nscarce, it is not friendly for LLMs. Although LLMs excel at higher-level\nlanguages like Python/C, they have a huge semantic gap from RTL. When\nimplementing the same functionality, Python/C code and hardware code differ\nsignificantly in the spatiotemporal granularity, requiring the LLM not only to\nconsider high-level functional semantics but also to ensure the low-level\ndetails align with the circuit code. It is not an easy task. In this paper, we\npropose a function abstracted verifiable middleware (Faver) that streamlines\nRTL verification in LLM-based workflows. By mixing LLM-friendly code structures\nwith a rule-based template, Faver decouples the details of circuit\nverification, allowing the LLM to focus on the functionality itself. In our\nexperiments on the SFT model and open-source models, Faver improved the model's\ngeneration accuracy by up to 14%."}
{"id": "2510.08713", "categories": ["cs.AI", "cs.CV", "cs.RO"], "pdf": "https://arxiv.org/pdf/2510.08713", "abs": "https://arxiv.org/abs/2510.08713", "authors": ["Yifei Dong", "Fengyi Wu", "Guangyu Chen", "Zhi-Qi Cheng", "Qiyu Hu", "Yuxuan Zhou", "Jingdong Sun", "Jun-Yan He", "Qi Dai", "Alexander G Hauptmann"], "title": "Unified World Models: Memory-Augmented Planning and Foresight for Visual Navigation", "comment": "18 pages, 11 figures, code: https://github.com/F1y1113/UniWM", "summary": "Enabling embodied agents to effectively imagine future states is critical for\nrobust and generalizable visual navigation. Current state-of-the-art\napproaches, however, adopt modular architectures that separate navigation\nplanning from visual world modeling, leading to state-action misalignment and\nlimited adaptability in novel or dynamic scenarios. To overcome this\nfundamental limitation, we propose UniWM, a unified, memory-augmented world\nmodel integrating egocentric visual foresight and planning within a single\nmultimodal autoregressive backbone. Unlike modular frameworks, UniWM explicitly\ngrounds action decisions in visually imagined outcomes, ensuring tight\nalignment between prediction and control. A hierarchical memory mechanism\nfurther integrates detailed short-term perceptual cues with longer-term\ntrajectory context, enabling stable, coherent reasoning over extended horizons.\nExtensive experiments across four challenging benchmarks (Go Stanford, ReCon,\nSCAND, HuRoN) demonstrate that UniWM substantially improves navigation success\nrates by up to 30%, significantly reduces trajectory errors compared to strong\nbaselines, and exhibits impressive zero-shot generalization on the unseen\nTartanDrive dataset. These results highlight UniWM as a principled step toward\nunified, imagination-driven embodied navigation."}
{"id": "2510.08829", "categories": ["cs.CR", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.08829", "abs": "https://arxiv.org/abs/2510.08829", "authors": ["Debeshee Das", "Luca Beurer-Kellner", "Marc Fischer", "Maximilian Baader"], "title": "CommandSans: Securing AI Agents with Surgical Precision Prompt Sanitization", "comment": null, "summary": "The increasing adoption of LLM agents with access to numerous tools and\nsensitive data significantly widens the attack surface for indirect prompt\ninjections. Due to the context-dependent nature of attacks, however, current\ndefenses are often ill-calibrated as they cannot reliably differentiate\nmalicious and benign instructions, leading to high false positive rates that\nprevent their real-world adoption. To address this, we present a novel approach\ninspired by the fundamental principle of computer security: data should not\ncontain executable instructions. Instead of sample-level classification, we\npropose a token-level sanitization process, which surgically removes any\ninstructions directed at AI systems from tool outputs, capturing malicious\ninstructions as a byproduct. In contrast to existing safety classifiers, this\napproach is non-blocking, does not require calibration, and is agnostic to the\ncontext of tool outputs. Further, we can train such token-level predictors with\nreadily available instruction-tuning data only, and don't have to rely on\nunrealistic prompt injection examples from challenges or of other synthetic\norigin. In our experiments, we find that this approach generalizes well across\na wide range of attacks and benchmarks like AgentDojo, BIPIA, InjecAgent, ASB\nand SEP, achieving a 7-10x reduction of attack success rate (ASR) (34% to 3% on\nAgentDojo), without impairing agent utility in both benign and malicious\nsettings."}
{"id": "2510.08665", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08665", "abs": "https://arxiv.org/abs/2510.08665", "authors": ["Aofan Liu", "Haoxuan Li", "Bin Wang", "Ao Yang", "Hui Li"], "title": "RA-Gen: A Controllable Code Generation Framework Using ReAct for Multi-Agent Task Execution", "comment": null, "summary": "Code generation models based on large language models (LLMs) have gained wide\nadoption, but challenges remain in ensuring safety, accuracy, and\ncontrollability, especially for complex tasks. Existing methods often lack\ndynamic integration of external tools, transparent reasoning, and user control\nover safety. To address these issues, we propose a controllable code generation\nframework utilizing the ReAct paradigm for multi-agent task execution. This\nframework is a multi-agent system designed to enable efficient, precise, and\ninterpretable code generation through dynamic interactions between LLMs and\nexternal resources. The framework adopts a collaborative architecture\ncomprising four specialized agents: a Planner for task decomposition, a\nSearcher that leverages the ReAct framework for reasoning and tool integration,\na CodeGen agent for accurate code generation, and an Extractor for structured\ndata retrieval. The ReAct-based Searcher alternates between generating\nreasoning traces and executing actions, facilitating seamless integration of\ninternal knowledge with external tools (such as search engines) to enhance\naccuracy and user control. Experimental results show the framework's\neffectiveness across multiple languages, achieving a 94.8% security rate on the\nSVEN dataset with CodeQL, outperforming existing approaches. Its transparent\nreasoning process fosters user trust and improves controllability."}
{"id": "2510.08755", "categories": ["cs.AI", "cs.CL", "cs.NI"], "pdf": "https://arxiv.org/pdf/2510.08755", "abs": "https://arxiv.org/abs/2510.08755", "authors": ["Pantea Karimi", "Dany Rouhana", "Pooria Namyar", "Siva Kesava Reddy Kakarla", "Venkat Arun", "Behnaz Arzani"], "title": "Robust Heuristic Algorithm Design with LLMs", "comment": null, "summary": "We posit that we can generate more robust and performant heuristics if we\naugment approaches using LLMs for heuristic design with tools that explain why\nheuristics underperform and suggestions about how to fix them. We find even\nsimple ideas that (1) expose the LLM to instances where the heuristic\nunderperforms; (2) explain why they occur; and (3) specialize design to regions\nin the input space, can produce more robust algorithms compared to existing\ntechniques~ -- ~the heuristics we produce have a $\\sim28\\times$ better\nworst-case performance compared to FunSearch, improve average performance, and\nmaintain the runtime."}
{"id": "2510.08918", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2510.08918", "abs": "https://arxiv.org/abs/2510.08918", "authors": ["Boyu Liu", "Yang Zhang", "Liang Cheng", "Yi Zhang", "Junjie Fan", "Yu Fu"], "title": "Psyzkaller: Learning from Historical and On-the-Fly Execution Data for Smarter Seed Generation in OS kernel Fuzzing", "comment": null, "summary": "Fuzzing has become a cornerstone technique for uncovering vulnerabilities and\nenhancing the security of OS kernels. However, state-of-the-art kernel fuzzers,\nincluding the de facto standard Syzkaller, struggle to generate valid syscall\nsequences that respect implicit Syscall Dependency Relations (SDRs).\nConsequently, many generated seeds either fail kernel validation or cannot\npenetrate deep execution paths, resulting in significant inefficiency.\n  We hypothesize that SDRs can be effectively learned from both historic and\npresent kernel execution data, and that incorporating these learned relations\ninto fuzzing can substantially improve seed validity and diversity. To validate\nthis, we propose an approach that utilizes the N-gram model to mine SDRs from\nthe Dongting dataset-one of the largest Linux kernel execution datasets\navailable-as well as from execution traces collected on the fly during fuzzing.\nThe resulting model is used to continuously augment the Choice Table of\nSyzkaller to improve its seed generation and demonstrably increases the Shannon\nEntropy of the Choice Table throughout fuzzing, reflecting more\nempirically-grounded choices in expanding syscall sequences into valid and\ndiverse seeds. In addition, we introduce a Random Walk strategy that instructs\nSyzkaller to construct seeds in a bidirectional manner to further diversify the\ngenerated seeds.\n  We implement our approach in a prototype, Psyzkaller, built on top of\nSyzkaller. Experiments on three representative Linux kernel versions show that\nPsyzkaller improves Syzkaller's code coverage by 4.6%-7.0% in 48-hour fuzzing,\nwhile triggering 110.4%-187.2% more crashes. Moreover, our investigation shows\nthat Psyzkaller discovered eight previously unknown kernel vulnerabilities,\ncompared to only one found by Syzkaller."}
{"id": "2510.08667", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08667", "abs": "https://arxiv.org/abs/2510.08667", "authors": ["Mohammad Baqar"], "title": "RAG4Tickets: AI-Powered Ticket Resolution via Retrieval-Augmented Generation on JIRA and GitHub Data", "comment": "13 Pages", "summary": "Modern software teams frequently encounter delays in resolving recurring or\nrelated issues due to fragmented knowledge scattered across JIRA tickets,\ndeveloper discussions, and GitHub pull requests (PRs). To address this\nchallenge, we propose a Retrieval-Augmented Generation (RAG) framework that\nintegrates Sentence-Transformers for semantic embeddings with FAISS-based\nvector search to deliver context-aware ticket resolution recommendations. The\napproach embeds historical JIRA tickets, user comments, and linked PR metadata\nto retrieve semantically similar past cases, which are then synthesized by a\nLarge Language Model (LLM) into grounded and explainable resolution\nsuggestions. The framework contributes a unified pipeline linking JIRA and\nGitHub data, an embedding and FAISS indexing strategy for heterogeneous\nsoftware artifacts, and a resolution generation module guided by retrieved\nevidence. Experimental evaluation using precision, recall, resolution time\nreduction, and developer acceptance metrics shows that the proposed system\nsignificantly improves resolution accuracy, fix quality, and knowledge reuse in\nmodern DevOps environments."}
{"id": "2510.08790", "categories": ["cs.AI", "cs.CL"], "pdf": "https://arxiv.org/pdf/2510.08790", "abs": "https://arxiv.org/abs/2510.08790", "authors": ["Guangya Wan", "Mingyang Ling", "Xiaoqi Ren", "Rujun Han", "Sheng Li", "Zizhao Zhang"], "title": "COMPASS: Enhancing Agent Long-Horizon Reasoning with Evolving Context", "comment": "Under Review for ACL", "summary": "Long-horizon tasks that require sustained reasoning and multiple tool\ninteractions remain challenging for LLM agents: small errors compound across\nsteps, and even state-of-the-art models often hallucinate or lose coherence. We\nidentify context management as the central bottleneck -- extended histories\ncause agents to overlook critical evidence or become distracted by irrelevant\ninformation, thus failing to replan or reflect from previous mistakes. To\naddress this, we propose COMPASS (Context-Organized Multi-Agent Planning and\nStrategy System), a lightweight hierarchical framework that separates tactical\nexecution, strategic oversight, and context organization into three specialized\ncomponents: (1) a Main Agent that performs reasoning and tool use, (2) a\nMeta-Thinker that monitors progress and issues strategic interventions, and (3)\na Context Manager that maintains concise, relevant progress briefs for\ndifferent reasoning stages. Across three challenging benchmarks -- GAIA,\nBrowseComp, and Humanity's Last Exam -- COMPASS improves accuracy by up to 20%\nrelative to both single- and multi-agent baselines. We further introduce a\ntest-time scaling extension that elevates performance to match established\nDeepResearch agents, and a post-training pipeline that delegates context\nmanagement to smaller models for enhanced efficiency."}
{"id": "2510.09006", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2510.09006", "abs": "https://arxiv.org/abs/2510.09006", "authors": ["Chandra Thapa", "Surya Nepal"], "title": "Future G Network's New Reality: Opportunities and Security Challenges", "comment": "12 pages, 7 figures", "summary": "Future G network's new reality is a widespread cyber-physical environment\ncreated by Integrated Sensing and Communication (ISAC). It is a crucial\ntechnology that transforms wireless connections into ubiquitous sensors. ISAC\nunlocks transformative new capabilities, powering autonomous systems, augmented\nhuman sensing, and next-generation immersive applications, such as digital\ntwins. However, this new reality fundamentally reshapes the security landscape.\nThe primary security concern shifts from the traditional focus on data\nprotection to a new priority: safeguarding the integrity of the system's\nperception of physical reality itself. This perception can be perilously\nmanipulated by sophisticated attacks such as sensing eavesdropping, phantom\ndangers, and invisible threats, potentially resulting in direct and\ncatastrophic physical harm. Traditional security measures, such as\nsignature-based detection, are insufficient to counter these perception-level\nthreats that mimic genuine physical signals. A proactive, layered,\ndefense-in-depth strategy is required, integrating physical, environmental,\nintelligence, and architectural security measures to build a trustworthy\necosystem. Additionally, realizing ISAC's potential responsibly also depends on\nparallel efforts in global standardization and strong governance to address the\nsignificant challenges of privacy, liability, and the technology's dual-use."}
{"id": "2510.08697", "categories": ["cs.SE", "cs.AI", "cs.CL"], "pdf": "https://arxiv.org/pdf/2510.08697", "abs": "https://arxiv.org/abs/2510.08697", "authors": ["Terry Yue Zhuo", "Xiaolong Jin", "Hange Liu", "Juyong Jiang", "Tianyang Liu", "Chen Gong", "Bhupesh Bishnoi", "Vaisakhi Mishra", "Marek Suppa", "Noah Ziems", "Saiteja Utpala", "Ming Xu", "Guangyu Song", "Kaixin Li", "Yuhan Cao", "Bo Liu", "Zheng Liu", "Sabina Abdurakhmanova", "Wenhao Yu", "Mengzhao Jia", "Jihan Yao", "Kenneth Hamilton", "Kumar Shridhar", "Minh Chien Vu", "Dingmin Wang", "Jiawei Liu", "Zijian Wang", "Qian Liu", "Binyuan Hui", "Meg Risdal", "Ahsen Khaliq", "Atin Sood", "Zhenchang Xing", "Wasi Uddin Ahmad", "John Grundy", "David Lo", "Banghua Zhu", "Xiaoning Du", "Torsten Scholak", "Leandro von Werra"], "title": "BigCodeArena: Unveiling More Reliable Human Preferences in Code Generation via Execution", "comment": "Built with love by the BigCode community :)", "summary": "Crowdsourced model evaluation platforms, such as Chatbot Arena, enable\nreal-time evaluation from human perspectives to assess the quality of model\nresponses. In the coding domain, manually examining the quality of\nLLM-generated content is extremely challenging, as it requires understanding\nlong chunks of raw code and deliberately simulating code execution. To this\nend, we introduce BigCodeArena, an open human evaluation platform for code\ngeneration backed by a comprehensive and on-the-fly execution environment.\nBuilt on top of Chatbot Arena, BigCodeArena enables the execution of\nLLM-generated code and allows humans to interact with the execution process and\noutcomes. We collected over 14,000 raw code-centric conversation sessions\nacross 10 widely used LLMs, spanning 10 languages and 8 types of execution\nenvironments. Among these conversations, we identified more than 4,700\nmulti-turn samples with pairwise human preferences. Further analysis uncovers\nunderexplored preferences of LLMs in fine-grained domains characterized by\ntasks, languages, and frameworks. To systematically examine code understanding\nand generation capabilities of frontier LLMs, we curated two benchmarks based\non the collected data, namely BigCodeReward and AutoCodeArena. For\nBigCodeReward, we post-processed the 4,700 conversations and evaluated the\nconsistency between reward models and human preferences. The evaluation shows\nthat most LLMs have superior performance in judging coding preferences when the\nexecution results are available. Inspired by these findings, we propose\nAutoCodeArena, an automatic Elo rating benchmark designed to assess the coding\nquality of LLMs without human involvement. We find that proprietary LLMs like\nGPT-5, Claude-Sonnet-4, and Claude-Opus-4 still lead in code generation\nperformance among recent emerging models."}
{"id": "2510.08831", "categories": ["cs.AI", "cs.CL", "cs.HC"], "pdf": "https://arxiv.org/pdf/2510.08831", "abs": "https://arxiv.org/abs/2510.08831", "authors": ["Wouter Haverals", "Meredith Martin"], "title": "Everyone prefers human writers, including AI", "comment": "46 pages, 18 figures (5 main text + 13 supplementary), 5 tables", "summary": "As AI writing tools become widespread, we need to understand how both humans\nand machines evaluate literary style, a domain where objective standards are\nelusive and judgments are inherently subjective. We conducted controlled\nexperiments using Raymond Queneau's Exercises in Style (1947) to measure\nattribution bias across evaluators. Study 1 compared human participants (N=556)\nand AI models (N=13) evaluating literary passages from Queneau versus\nGPT-4-generated versions under three conditions: blind, accurately labeled, and\ncounterfactually labeled. Study 2 tested bias generalization across a\n14$\\times$14 matrix of AI evaluators and creators. Both studies revealed\nsystematic pro-human attribution bias. Humans showed +13.7 percentage point\n(pp) bias (Cohen's h = 0.28, 95% CI: 0.21-0.34), while AI models showed +34.3\npercentage point bias (h = 0.70, 95% CI: 0.65-0.76), a 2.5-fold stronger effect\n(P$<$0.001). Study 2 confirmed this bias operates across AI architectures\n(+25.8pp, 95% CI: 24.1-27.6%), demonstrating that AI systems systematically\ndevalue creative content when labeled as \"AI-generated\" regardless of which AI\ncreated it. We also find that attribution labels cause evaluators to invert\nassessment criteria, with identical features receiving opposing evaluations\nbased solely on perceived authorship. This suggests AI models have absorbed\nhuman cultural biases against artificial creativity during training. Our study\nrepresents the first controlled comparison of attribution bias between human\nand artificial evaluators in aesthetic judgment, revealing that AI systems not\nonly replicate but amplify this human tendency."}
{"id": "2510.09093", "categories": ["cs.CR", "cs.CL", "68T50, 68T0", "F.2.2; I.2.7; K.6.5"], "pdf": "https://arxiv.org/pdf/2510.09093", "abs": "https://arxiv.org/abs/2510.09093", "authors": ["Dennis Rall", "Bernhard Bauer", "Mohit Mittal", "Thomas Fraunholz"], "title": "Exploiting Web Search Tools of AI Agents for Data Exfiltration", "comment": "9 pages, 6 figures, conference article", "summary": "Large language models (LLMs) are now routinely used to autonomously execute\ncomplex tasks, from natural language processing to dynamic workflows like web\nsearches. The usage of tool-calling and Retrieval Augmented Generation (RAG)\nallows LLMs to process and retrieve sensitive corporate data, amplifying both\ntheir functionality and vulnerability to abuse. As LLMs increasingly interact\nwith external data sources, indirect prompt injection emerges as a critical and\nevolving attack vector, enabling adversaries to exploit models through\nmanipulated inputs. Through a systematic evaluation of indirect prompt\ninjection attacks across diverse models, we analyze how susceptible current\nLLMs are to such attacks, which parameters, including model size and\nmanufacturer, specific implementations, shape their vulnerability, and which\nattack methods remain most effective. Our results reveal that even well-known\nattack patterns continue to succeed, exposing persistent weaknesses in model\ndefenses. To address these vulnerabilities, we emphasize the need for\nstrengthened training procedures to enhance inherent resilience, a centralized\ndatabase of known attack vectors to enable proactive defense, and a unified\ntesting framework to ensure continuous security validation. These steps are\nessential to push developers toward integrating security into the core design\nof LLMs, as our findings show that current models still fail to mitigate\nlong-standing threats."}
{"id": "2510.08716", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.08716", "abs": "https://arxiv.org/abs/2510.08716", "authors": ["Stephan Lukasczyk", "Gordon Fraser"], "title": "Search-based Hyperparameter Tuning for Python Unit Test Generation", "comment": "Accepted to the 17th Symposium on Search-Based Software Engineering\n  2025 (SSBSE 2025)", "summary": "Search-based test-generation algorithms have countless configuration options.\nUsers rarely adjust these options and usually stick to the default values,\nwhich may not lead to the best possible results. Tuning an algorithm's\nhyperparameters is a method to find better hyperparameter values, but it\ntypically comes with a high demand of resources. Meta-heuristic search\nalgorithms -- that effectively solve the test-generation problem -- have been\nproposed as a solution to also efficiently tune parameters. In this work we\nexplore the use of differential evolution as a means for tuning the\nhyperparameters of the DynaMOSA and MIO many-objective search algorithms as\nimplemented in the Pynguin framework. Our results show that significant\nimprovement of the resulting test suite's coverage is possible with the tuned\nDynaMOSA algorithm and that differential evolution is more efficient than basic\ngrid search."}
{"id": "2510.08847", "categories": ["cs.AI", "cs.MA"], "pdf": "https://arxiv.org/pdf/2510.08847", "abs": "https://arxiv.org/abs/2510.08847", "authors": ["Allison Sihan Jia", "Daniel Huang", "Nikhil Vytla", "Nirvika Choudhury", "John C Mitchell", "Anupam Datta"], "title": "What Is Your Agent's GPA? A Framework for Evaluating Agent Goal-Plan-Action Alignment", "comment": null, "summary": "We introduce the Agent GPA (Goal-Plan-Action) framework: an evaluation\nparadigm based on an agent's operational loop of setting goals, devising plans,\nand executing actions. The framework includes five evaluation metrics: Goal\nFulfillment, Logical Consistency, Execution Efficiency, Plan Quality, and Plan\nAdherence. Logical Consistency checks that an agent's actions are consistent\nwith its prior actions. Execution Efficiency checks whether the agent executes\nin the most efficient way to achieve its goal. Plan Quality checks whether an\nagent's plans are aligned with its goals; Plan Adherence checks if an agent's\nactions are aligned with its plan; and Goal Fulfillment checks that agent's\nfinal outcomes match the stated goals. Our experimental results on two\nbenchmark datasets - the public TRAIL/GAIA dataset and an internal dataset for\na production-grade data agent - show that this framework (a) provides a\nsystematic way to cover a broad range of agent failures, including all agent\nerrors on the TRAIL/GAIA benchmark dataset; (b) supports LLM-judges that\nexhibit strong agreement with human annotation, covering 80% to over 95%\nerrors; and (c) localizes errors with 86% agreement to enable targeted\nimprovement of agent performance."}
{"id": "2510.09210", "categories": ["cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.09210", "abs": "https://arxiv.org/abs/2510.09210", "authors": ["Yifan Zhu", "Lijia Yu", "Xiao-Shan Gao"], "title": "Provable Watermarking for Data Poisoning Attacks", "comment": "42 pages, NeurIPS 2025", "summary": "In recent years, data poisoning attacks have been increasingly designed to\nappear harmless and even beneficial, often with the intention of verifying\ndataset ownership or safeguarding private data from unauthorized use. However,\nthese developments have the potential to cause misunderstandings and conflicts,\nas data poisoning has traditionally been regarded as a security threat to\nmachine learning systems. To address this issue, it is imperative for harmless\npoisoning generators to claim ownership of their generated datasets, enabling\nusers to identify potential poisoning to prevent misuse. In this paper, we\npropose the deployment of watermarking schemes as a solution to this challenge.\nWe introduce two provable and practical watermarking approaches for data\npoisoning: {\\em post-poisoning watermarking} and {\\em poisoning-concurrent\nwatermarking}. Our analyses demonstrate that when the watermarking length is\n$\\Theta(\\sqrt{d}/\\epsilon_w)$ for post-poisoning watermarking, and falls within\nthe range of $\\Theta(1/\\epsilon_w^2)$ to $O(\\sqrt{d}/\\epsilon_p)$ for\npoisoning-concurrent watermarking, the watermarked poisoning dataset provably\nensures both watermarking detectability and poisoning utility, certifying the\npracticality of watermarking under data poisoning attacks. We validate our\ntheoretical findings through experiments on several attacks, models, and\ndatasets."}
{"id": "2510.08810", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.08810", "abs": "https://arxiv.org/abs/2510.08810", "authors": ["Mohayeminul Islam", "Ajay Kumar Jha", "May Mahmoud", "Sarah Nadi"], "title": "PyMigTool: a tool for end-to-end Python library migration", "comment": "arXiv admin note: text overlap with arXiv:2504.13272", "summary": "Library migration is the process of replacing a library with a similar one in\na software project. Manual library migration is time consuming and error prone,\nas it requires developers to understand the Application Programming Interfaces\n(API) of both libraries, map equivalent APIs, and perform the necessary code\ntransformations. Due to the difficulty of the library migration process, most\nof the existing automated techniques and tooling stop at the API mapping stage\nor support a limited set of libraries and code transformations. In this paper,\nwe develop an end-to-end solution that can automatically migrate code between\nany arbitrary pair of Python libraries that provide similar functionality. Due\nto the promising capabilities of Large Language Models (LLMs) in code\ngeneration and transformation, we use LLMs as the primary engine for migration.\nBefore building the tool, we first study the capabilities of LLMs for library\nmigration on a benchmark of 321 real-world library migrations. We find that\nLLMs can effectively perform library migration, but some post-processing steps\ncan further improve the performance. Based on this, we develop PyMigTool, a\ncommand line application that combines the power of LLMs, static analysis, and\ndynamic analysis to provide accurate library migration. We evaluate PyMigTool\non 717 real-world Python applications that are not from our benchmark. We find\nthat PyMigTool can migrate 32% of the migrations with complete correctness. Of\nthe remaining migrations, only 14% of the migration-related changes are left\nfor developers to fix for more than half of the projects."}
{"id": "2510.08867", "categories": ["cs.AI", "cs.CL"], "pdf": "https://arxiv.org/pdf/2510.08867", "abs": "https://arxiv.org/abs/2510.08867", "authors": ["Gaurav Sahu", "Hugo Larochelle", "Laurent Charlin", "Christopher Pal"], "title": "ReviewerToo: Should AI Join The Program Committee? A Look At The Future of Peer Review", "comment": null, "summary": "Peer review is the cornerstone of scientific publishing, yet it suffers from\ninconsistencies, reviewer subjectivity, and scalability challenges. We\nintroduce ReviewerToo, a modular framework for studying and deploying\nAI-assisted peer review to complement human judgment with systematic and\nconsistent assessments. ReviewerToo supports systematic experiments with\nspecialized reviewer personas and structured evaluation criteria, and can be\npartially or fully integrated into real conference workflows. We validate\nReviewerToo on a carefully curated dataset of 1,963 paper submissions from ICLR\n2025, where our experiments with the gpt-oss-120b model achieves 81.8% accuracy\nfor the task of categorizing a paper as accept/reject compared to 83.9% for the\naverage human reviewer. Additionally, ReviewerToo-generated reviews are rated\nas higher quality than the human average by an LLM judge, though still trailing\nthe strongest expert contributions. Our analysis highlights domains where AI\nreviewers excel (e.g., fact-checking, literature coverage) and where they\nstruggle (e.g., assessing methodological novelty and theoretical\ncontributions), underscoring the continued need for human expertise. Based on\nthese findings, we propose guidelines for integrating AI into peer-review\npipelines, showing how AI can enhance consistency, coverage, and fairness while\nleaving complex evaluative judgments to domain experts. Our work provides a\nfoundation for systematic, hybrid peer-review systems that scale with the\ngrowth of scientific publishing."}
{"id": "2510.09260", "categories": ["cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.09260", "abs": "https://arxiv.org/abs/2510.09260", "authors": ["Subrat Kishore Dutta", "Yuelin Xu", "Piyush Pant", "Xiao Zhang"], "title": "GREAT: Generalizable Backdoor Attacks in RLHF via Emotion-Aware Trigger Synthesis", "comment": null, "summary": "Recent work has shown that RLHF is highly susceptible to backdoor attacks,\npoisoning schemes that inject malicious triggers in preference data. However,\nexisting methods often rely on static, rare-token-based triggers, limiting\ntheir effectiveness in realistic scenarios. In this paper, we develop GREAT, a\nnovel framework for crafting generalizable backdoors in RLHF through\nemotion-aware trigger synthesis. Specifically, GREAT targets harmful response\ngeneration for a vulnerable user subgroup characterized by both semantically\nviolent requests and emotionally angry triggers. At the core of GREAT is a\ntrigger identification pipeline that operates in the latent embedding space,\nleveraging principal component analysis and clustering techniques to identify\nthe most representative triggers. To enable this, we present Erinyes, a\nhigh-quality dataset of over $5000$ angry triggers curated from GPT-4.1 using a\nprincipled, hierarchical, and diversity-promoting approach. Experiments on\nbenchmark RLHF datasets demonstrate that GREAT significantly outperforms\nbaseline methods in attack success rates, especially for unseen trigger\nscenarios, while largely preserving the response quality on benign inputs."}
{"id": "2510.08827", "categories": ["cs.SE", "cs.AI", "cs.CL", "cs.CY"], "pdf": "https://arxiv.org/pdf/2510.08827", "abs": "https://arxiv.org/abs/2510.08827", "authors": ["Erfan Al-Hossami", "Razvan Bunescu"], "title": "McMining: Automated Discovery of Misconceptions in Student Code", "comment": "16 pages, 8 figures", "summary": "When learning to code, students often develop misconceptions about various\nprogramming language concepts. These can not only lead to bugs or inefficient\ncode, but also slow down the learning of related concepts. In this paper, we\nintroduce McMining, the task of mining programming misconceptions from samples\nof code from a student. To enable the training and evaluation of McMining\nsystems, we develop an extensible benchmark dataset of misconceptions together\nwith a large set of code samples where these misconceptions are manifested. We\nthen introduce two LLM-based McMiner approaches and through extensive\nevaluations show that models from the Gemini, Claude, and GPT families are\neffective at discovering misconceptions in student code."}
{"id": "2510.08872", "categories": ["cs.AI", "cs.GT", "cs.HC", "cs.LG", "cs.MA"], "pdf": "https://arxiv.org/pdf/2510.08872", "abs": "https://arxiv.org/abs/2510.08872", "authors": ["Siqi Zhu", "David Zhang", "Pedro Cisneros-Velarde", "Jiaxuan You"], "title": "GTAlign: Game-Theoretic Alignment of LLM Assistants for Mutual Welfare", "comment": "31 pages, 6 figures", "summary": "Large Language Models (LLMs) have achieved remarkable progress in reasoning,\nyet sometimes produce responses that are suboptimal for users in tasks such as\nwriting, information seeking, or providing practical guidance. Conventional\nalignment practices typically assume that maximizing model reward also\nmaximizes user welfare, but this assumption frequently fails in practice:\nmodels may over-clarify or generate overly verbose reasoning when users prefer\nconcise answers. Such behaviors resemble the prisoner's dilemma, where\nindividually rational choices lead to socially suboptimal outcomes. The\nfundamental challenge is the lack of a principled decision making mechanism\nthat mutually benefits both the LLM and the user. We propose Game-Theoretic\nAlignment (GTAlign), an alignment framework that integrates game-theoretic\ndecision making into both reasoning and training. During reasoning, the model\nexplicitly treats user-LLM interaction as a strategic game: it constructs\npayoff matrices within its reasoning chain to estimate welfare for both itself\nand the user, and then selects actions that are mutually beneficial. During\ntraining, we introduce a mutual welfare reward that reinforces cooperative\nresponses, aligning model behavior with socially efficient outcomes. In\naddition, we introduce an inference technique that leverages game-theoretic\nreasoning to dynamically adapt LLM's response when pricing policies of LLM\nservice change. Extensive experiments demonstrate that GTAlign substantially\nimproves reasoning efficiency, answer quality, and mutual welfare compared to\nbaselines across diverse tasks. The code is available at\nhttps://github.com/ulab-uiuc/GTAlign ."}
{"id": "2510.09263", "categories": ["cs.CR", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.09263", "abs": "https://arxiv.org/abs/2510.09263", "authors": ["Sven Gowal", "Rudy Bunel", "Florian Stimberg", "David Stutz", "Guillermo Ortiz-Jimenez", "Christina Kouridi", "Mel Vecerik", "Jamie Hayes", "Sylvestre-Alvise Rebuffi", "Paul Bernard", "Chris Gamble", "Mikl√≥s Z. Horv√°th", "Fabian Kaczmarczyck", "Alex Kaskasoli", "Aleksandar Petrov", "Ilia Shumailov", "Meghana Thotakuri", "Olivia Wiles", "Jessica Yung", "Zahra Ahmed", "Victor Martin", "Simon Rosen", "Christopher Savƒçak", "Armin Senoner", "Nidhi Vyas", "Pushmeet Kohli"], "title": "SynthID-Image: Image watermarking at internet scale", "comment": null, "summary": "We introduce SynthID-Image, a deep learning-based system for invisibly\nwatermarking AI-generated imagery. This paper documents the technical\ndesiderata, threat models, and practical challenges of deploying such a system\nat internet scale, addressing key requirements of effectiveness, fidelity,\nrobustness, and security. SynthID-Image has been used to watermark over ten\nbillion images and video frames across Google's services and its corresponding\nverification service is available to trusted testers. For completeness, we\npresent an experimental evaluation of an external model variant, SynthID-O,\nwhich is available through partnerships. We benchmark SynthID-O against other\npost-hoc watermarking methods from the literature, demonstrating\nstate-of-the-art performance in both visual quality and robustness to common\nimage perturbations. While this work centers on visual media, the conclusions\non deployment, constraints, and threat modeling generalize to other modalities,\nincluding audio. This paper provides a comprehensive documentation for the\nlarge-scale deployment of deep learning-based media provenance systems."}
{"id": "2510.08834", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.08834", "abs": "https://arxiv.org/abs/2510.08834", "authors": ["Carlos Pinto Gomez", "Fabio Petrillo"], "title": "Identifying Video Game Debugging Bottlenecks: An Industry Perspective", "comment": "8 pages, 3 figures, 4 tables, gas 2026 conference submission", "summary": "Conventional debugging techniques used in traditional software are similarly\nused when debugging video games. However, the reality of video games require\nits own set of unique debugging techniques such as On-Screen Console, Debug\nDraws, Debug Camera, Cheats and In-Game Menus, and Data Scrubbing. In this\narticle, we provide insights from a video game studio on how 20 seasoned\nindustry game developers debug during the production of a game. Our experiments\nrely on the recordings of debugging sessions for the most critical bugs\ncategorized as Crashes, Object Behaviors, and Object Persistence. In this\npaper, we focus on identifying the debugging activities that bottleneck bug\nresolution. We also identify the debugging tools used to perform debugging\ntechniques. Lastly, we present how different disciplines collaborate during\ndebugging and how technical roles are at the core of debugging. Our thematic\nanalysis has identified game developers spend 36.6\\% of their time inspecting\ngame artifacts and 35.1\\% of their time reproducing the bug locally."}
{"id": "2510.08928", "categories": ["cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08928", "abs": "https://arxiv.org/abs/2510.08928", "authors": ["Yushuo Zheng", "Zicheng Zhang", "Xiongkuo Min", "Huiyu Duan", "Guangtao Zhai"], "title": "LM Fight Arena: Benchmarking Large Multimodal Models via Game Competition", "comment": null, "summary": "Existing benchmarks for large multimodal models (LMMs) often fail to capture\ntheir performance in real-time, adversarial environments. We introduce LM Fight\nArena (Large Model Fight Arena), a novel framework that evaluates LMMs by\npitting them against each other in the classic fighting game Mortal Kombat II,\na task requiring rapid visual understanding and tactical, sequential\ndecision-making. In a controlled tournament, we test six leading open- and\nclosed-source models, where each agent operates controlling the same character\nto ensure a fair comparison. The models are prompted to interpret game frames\nand state data to select their next actions. Unlike static evaluations, LM\nFight Arena provides a fully automated, reproducible, and objective assessment\nof an LMM's strategic reasoning capabilities in a dynamic setting. This work\nintroduces a challenging and engaging benchmark that bridges the gap between AI\nevaluation and interactive entertainment."}
{"id": "2510.09269", "categories": ["cs.CR", "cs.CV", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.09269", "abs": "https://arxiv.org/abs/2510.09269", "authors": ["Zirun Zhou", "Zhengyang Xiao", "Haochuan Xu", "Jing Sun", "Di Wang", "Jingfeng Zhang"], "title": "Goal-oriented Backdoor Attack against Vision-Language-Action Models via Physical Objects", "comment": null, "summary": "Recent advances in vision-language-action (VLA) models have greatly improved\nembodied AI, enabling robots to follow natural language instructions and\nperform diverse tasks. However, their reliance on uncurated training datasets\nraises serious security concerns. Existing backdoor attacks on VLAs mostly\nassume white-box access and result in task failures instead of enforcing\nspecific actions. In this work, we reveal a more practical threat: attackers\ncan manipulate VLAs by simply injecting physical objects as triggers into the\ntraining dataset. We propose goal-oriented backdoor attacks (GoBA), where the\nVLA behaves normally in the absence of physical triggers but executes\npredefined and goal-oriented actions in the presence of physical triggers.\nSpecifically, based on a popular VLA benchmark LIBERO, we introduce BadLIBERO\nthat incorporates diverse physical triggers and goal-oriented backdoor actions.\nIn addition, we propose a three-level evaluation that categorizes the victim\nVLA's actions under GoBA into three states: nothing to do, try to do, and\nsuccess to do. Experiments show that GoBA enables the victim VLA to\nsuccessfully achieve the backdoor goal in 97 percentage of inputs when the\nphysical trigger is present, while causing zero performance degradation on\nclean inputs. Finally, by investigating factors related to GoBA, we find that\nthe action trajectory and trigger color significantly influence attack\nperformance, while trigger size has surprisingly little effect. The code and\nBadLIBERO dataset are accessible via the project page at\nhttps://goba-attack.github.io/."}
{"id": "2510.08850", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08850", "abs": "https://arxiv.org/abs/2510.08850", "authors": ["Vasudha Yanuganti", "Ishaan Puri", "Swapnil Chhatre", "Mantinder Singh", "Ashok Jallepalli", "Hritvik Shrivastava", "Pradeep Kumar Sharma"], "title": "Repository-Aware File Path Retrieval via Fine-Tuned LLMs", "comment": null, "summary": "Modern codebases make it hard for developers and AI coding assistants to find\nthe right source files when answering questions like \"How does this feature\nwork?\" or \"Where was the bug introduced?\" Traditional code search (keyword or\nIR based) often misses semantic context and cross file links, while large\nlanguage models (LLMs) understand natural language but lack repository specific\ndetail. We present a method for file path retrieval that fine tunes a strong\nLLM (Qwen3-8B) with QLoRA and Unsloth optimizations to predict relevant file\npaths directly from a natural language query. To build training data, we\nintroduce six code aware strategies that use abstract syntax tree (AST)\nstructure and repository content to generate realistic question-answer pairs,\nwhere answers are sets of file paths. The strategies range from single file\nprompts to hierarchical repository summaries, providing broad coverage. We fine\ntune on Python projects including Flask, Click, Jinja, FastAPI, and PyTorch,\nand obtain high retrieval accuracy: up to 91\\% exact match and 93\\% recall on\nheld out queries, clearly beating single strategy training. On a large codebase\nlike PyTorch (about 4,000 Python files), the model reaches 59\\% recall, showing\nscalability. We analyze how multi level code signals help the LLM reason over\ncross file context and discuss dataset design, limits (for example, context\nlength in very large repos), and future integration of retrieval with LLM based\ncode intelligence."}
{"id": "2510.08931", "categories": ["cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.08931", "abs": "https://arxiv.org/abs/2510.08931", "authors": ["Ashish Kattamuri", "Harshwardhan Fartale", "Arpita Vats", "Rahul Raja", "Ishita Prasad"], "title": "RADAR: Mechanistic Pathways for Detecting Data Contamination in LLM Evaluation", "comment": "NeurIPS 2025 Workshop on Evaluating the Evolving LLM Lifecycle:\n  Benchmarks, Emergent Abilities, and Scaling", "summary": "Data contamination poses a significant challenge to reliable LLM evaluation,\nwhere models may achieve high performance by memorizing training data rather\nthan demonstrating genuine reasoning capabilities. We introduce RADAR (Recall\nvs. Reasoning Detection through Activation Representation), a novel framework\nthat leverages mechanistic interpretability to detect contamination by\ndistinguishing recall-based from reasoning-based model responses. RADAR\nextracts 37 features spanning surface-level confidence trajectories and deep\nmechanistic properties including attention specialization, circuit dynamics,\nand activation flow patterns. Using an ensemble of classifiers trained on these\nfeatures, RADAR achieves 93\\% accuracy on a diverse evaluation set, with\nperfect performance on clear cases and 76.7\\% accuracy on challenging ambiguous\nexamples. This work demonstrates the potential of mechanistic interpretability\nfor advancing LLM evaluation beyond traditional surface-level metrics."}
{"id": "2510.09271", "categories": ["cs.CR", "cs.ET", "cs.PF"], "pdf": "https://arxiv.org/pdf/2510.09271", "abs": "https://arxiv.org/abs/2510.09271", "authors": ["Alison Gon√ßalves Schemitt", "Henrique Fan da Silva", "Roben Castagna Lunardi", "Diego Kreutz", "Rodrigo Brand√£o Mansilha", "Avelino Francisco Zorzo"], "title": "Assessing the Impact of Post-Quantum Digital Signature Algorithms on Blockchains", "comment": "8 pages, 4 figures. Accepted paper in IEEE 24th International\n  Conference on Trust, Security and Privacy in Computing and Communications\n  (TrustCom 2025)", "summary": "The advent of quantum computing threatens the security of traditional\nencryption algorithms, motivating the development of post-quantum cryptography\n(PQC). In 2024, the National Institute of Standards and Technology (NIST)\nstandardized several PQC algorithms, marking an important milestone in the\ntransition toward quantum-resistant security. Blockchain systems fundamentally\nrely on cryptographic primitives to guarantee data integrity and transaction\nauthenticity. However, widely used algorithms such as ECDSA, employed in\nBitcoin, Ethereum, and other networks, are vulnerable to quantum attacks.\nAlthough adopting PQC is essential for long-term security, its computational\noverhead in blockchain environments remains largely unexplored. In this work,\nwe propose a methodology for benchmarking both PQC and traditional\ncryptographic algorithms in blockchain contexts. We measure signature\ngeneration and verification times across diverse computational environments and\nsimulate their impact at scale. Our evaluation focuses on PQC digital signature\nschemes (ML-DSA, Dilithium, Falcon, Mayo, SLH-DSA, SPHINCS+, and Cross) across\nsecurity levels 1 to 5, comparing them to ECDSA, the current standard in\nBitcoin and Ethereum. Our results indicate that PQC algorithms introduce only\nminor performance overhead at security level 1, while in some scenarios they\nsignificantly outperform ECDSA at higher security levels. For instance, ML-DSA\nachieves a verification time of 0.14 ms on an ARM-based laptop at level 5,\ncompared to 0.88 ms for ECDSA. We also provide an open-source implementation to\nensure reproducibility and encourage further research."}
{"id": "2510.08876", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08876", "abs": "https://arxiv.org/abs/2510.08876", "authors": ["Kostiantyn Bevziuk", "Andrii Fatula", "Svetozar Lashin Yaroslav Opanasenko", "Anna Tukhtarova", "Ashok Jallepalli Pradeepkumar Sharma", "Hritvik Shrivastava"], "title": "Vector Graph-Based Repository Understanding for Issue-Driven File Retrieval", "comment": null, "summary": "We present a repository decomposition system that converts large software\nrepositories into a vectorized knowledge graph which mirrors project\narchitectural and semantic structure, capturing semantic relationships and\nallowing a significant level of automatization of further repository\ndevelopment. The graph encodes syntactic relations such as containment,\nimplementation, references, calls, and inheritance, and augments nodes with\nLLM-derived summaries and vector embeddings. A hybrid retrieval pipeline\ncombines semantic retrieval with graph-aware expansion, and an LLM-based\nassistant formulates constrained, read-only graph requests and produces\nhuman-oriented explanations."}
{"id": "2510.08945", "categories": ["cs.AI", "I.7.5; I.2.1; I.2.8; I.2.7"], "pdf": "https://arxiv.org/pdf/2510.08945", "abs": "https://arxiv.org/abs/2510.08945", "authors": ["Samuel Hildebrand", "Curtis Taylor", "Sean Oesch", "James M Ghawaly Jr", "Amir Sadovnik", "Ryan Shivers", "Brandon Schreiber", "Kevin Kurian"], "title": "FATHOMS-RAG: A Framework for the Assessment of Thinking and Observation in Multimodal Systems that use Retrieval Augmented Generation", "comment": null, "summary": "Retrieval-augmented generation (RAG) has emerged as a promising paradigm for\nimproving factual accuracy in large language models (LLMs). We introduce a\nbenchmark designed to evaluate RAG pipelines as a whole, evaluating a\npipeline's ability to ingest, retrieve, and reason about several modalities of\ninformation, differentiating it from existing benchmarks that focus on\nparticular aspects such as retrieval. We present (1) a small, human-created\ndataset of 93 questions designed to evaluate a pipeline's ability to ingest\ntextual data, tables, images, and data spread across these modalities in one or\nmore documents; (2) a phrase-level recall metric for correctness; (3) a\nnearest-neighbor embedding classifier to identify potential pipeline\nhallucinations; (4) a comparative evaluation of 2 pipelines built with\nopen-source retrieval mechanisms and 4 closed-source foundation models; and (5)\na third-party human evaluation of the alignment of our correctness and\nhallucination metrics. We find that closed-source pipelines significantly\noutperform open-source pipelines in both correctness and hallucination metrics,\nwith wider performance gaps in questions relying on multimodal and\ncross-document information. Human evaluation of our metrics showed average\nagreement of 4.62 for correctness and 4.53 for hallucination detection on a 1-5\nLikert scale (5 indicating \"strongly agree\")."}
{"id": "2510.09272", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2510.09272", "abs": "https://arxiv.org/abs/2510.09272", "authors": ["Moritz Steffin", "Jiska Classen"], "title": "Modern iOS Security Features -- A Deep Dive into SPTM, TXM, and Exclaves", "comment": null, "summary": "The XNU kernel is the basis of Apple's operating systems. Although labeled as\na hybrid kernel, it is found to generally operate in a monolithic manner by\ndefining a single privileged trust zone in which all system functionality\nresides. This has security implications, as a kernel compromise has immediate\nand significant effects on the entire system. Over the past few years, Apple\nhas taken steps towards a more compartmentalized kernel architecture and a more\nmicrokernel-like design. To date, there has been no scientific discussion of\nSPTM and related security mechanisms. Therefore, the understanding of the\nsystem and the underlying security mechanisms is minimal. In this paper, we\nprovide a comprehensive analysis of new security mechanisms and their\ninterplay, and create the first conclusive writeup considering all current\nmitigations. SPTM acts as the sole authority regarding memory retyping. Our\nanalysis reveals that, through SPTM domains based on frame retyping and memory\nmapping rule sets, SPTM introduces domains of trust into the system,\neffectively gapping different functionalities from one another. Gapped\nfunctionality includes the TXM, responsible for code signing and entitlement\nverification. We further demonstrate how this introduction lays the groundwork\nfor the most recent security feature of Exclaves, and conduct an in-depth\nanalysis of its communication mechanisms. We discover multifold ways of\ncommunication, most notably xnuproxy as a secure world request handler, and the\nTightbeam IPC framework. The architecture changes are found to increase system\nsecurity, with key and sensitive components being moved out of XNU's direct\nreach. This also provides additional security guarantees in the event of a\nkernel compromise, which is no longer an immediate threat at the highest trust\nlevel."}
{"id": "2510.08981", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08981", "abs": "https://arxiv.org/abs/2510.08981", "authors": ["Mandira Roy", "Novarun Deb", "Nabendu Chaki", "Agostino Cortesi"], "title": "SEER: Sustainability Enhanced Engineering of Software Requirements", "comment": "Main Paper: 32 pages, References: 3 pages, Appendix: 13 pages.\n  Submitted to the Journal of Systems and Software, Elsevier", "summary": "The rapid expansion of software development has significant environmental,\ntechnical, social, and economic impacts. Achieving the United Nations\nSustainable Development Goals by 2030 compels developers to adopt sustainable\npractices. Existing methods mostly offer high-level guidelines, which are\ntime-consuming to implement and rely on team adaptability. Moreover, they focus\non design or implementation, while sustainability assessment should start at\nthe requirements engineering phase. In this paper, we introduce SEER, a\nframework which addresses sustainability concerns in the early software\ndevelopment phase. The framework operates in three stages: (i) it identifies\nsustainability requirements (SRs) relevant to a specific software product from\na general taxonomy; (ii) it evaluates how sustainable system requirements are\nbased on the identified SRs; and (iii) it optimizes system requirements that\nfail to satisfy any SR. The framework is implemented using the reasoning\ncapabilities of large language models and the agentic RAG (Retrieval Augmented\nGeneration) approach. SEER has been experimented on four software projects from\ndifferent domains. Results generated using Gemini 2.5 reasoning model\ndemonstrate the effectiveness of the proposed approach in accurately\nidentifying a broad range of sustainability concerns across diverse domains."}
{"id": "2510.08958", "categories": ["cs.AI", "cs.IR"], "pdf": "https://arxiv.org/pdf/2510.08958", "abs": "https://arxiv.org/abs/2510.08958", "authors": ["Zirui Liao"], "title": "EcphoryRAG: Re-Imagining Knowledge-Graph RAG via Human Associative Memory", "comment": null, "summary": "Cognitive neuroscience research indicates that humans leverage cues to\nactivate entity-centered memory traces (engrams) for complex, multi-hop\nrecollection. Inspired by this mechanism, we introduce EcphoryRAG, an\nentity-centric knowledge graph RAG framework. During indexing, EcphoryRAG\nextracts and stores only core entities with corresponding metadata, a\nlightweight approach that reduces token consumption by up to 94\\% compared to\nother structured RAG systems. For retrieval, the system first extracts cue\nentities from queries, then performs a scalable multi-hop associative search\nacross the knowledge graph. Crucially, EcphoryRAG dynamically infers implicit\nrelations between entities to populate context, enabling deep reasoning without\nexhaustive pre-enumeration of relationships. Extensive evaluations on the\n2WikiMultiHop, HotpotQA, and MuSiQue benchmarks demonstrate that EcphoryRAG\nsets a new state-of-the-art, improving the average Exact Match (EM) score from\n0.392 to 0.474 over strong KG-RAG methods like HippoRAG. These results validate\nthe efficacy of the entity-cue-multi-hop retrieval paradigm for complex\nquestion answering."}
{"id": "2510.09433", "categories": ["cs.CR", "cs.ET"], "pdf": "https://arxiv.org/pdf/2510.09433", "abs": "https://arxiv.org/abs/2510.09433", "authors": ["Raffaele Cristodaro", "Benjamin Kramer", "Claudio J. Tessone"], "title": "Clustering Deposit and Withdrawal Activity in Tornado Cash: A Cross-Chain Analysis", "comment": null, "summary": "Tornado Cash is a decentralised mixer that uses cryptographic techniques to\nsever the on-chain trail between depositors and withdrawers. In practice,\nhowever, its anonymity can be undermined by user behaviour and operational\nquirks. We conduct the first cross-chain empirical study of Tornado Cash\nactivity on Ethereum, BNB Smart Chain, and Polygon, introducing three\nclustering heuristics-(i) address-reuse, (ii) transactional-linkage, and (iii)\na novel first-in-first-out (FIFO) temporal-matching rule. Together, these\nheuristics reconnect deposits to withdrawals and deanonymise a substantial\nshare of recipients. Our analysis shows that 5.1 - 12.6% of withdrawals can\nalready be traced to their originating deposits through address reuse and\ntransactional linkage heuristics. Adding our novel First-In-First-Out (FIFO)\ntemporal-matching heuristic lifts the linkage rate by a further 15 - 22\npercentage points. Statistical tests confirm that these FIFO matches are highly\nunlikely to occur by chance. Comparable leakage across Ethereum, BNB Smart\nChain, and Polygon indicates chain-agnostic user misbehaviour, rather than\nchain-specific protocol flaws. These results expose how quickly cryptographic\nguarantees can unravel in everyday use, underscoring the need for both\ndisciplined user behaviour and privacy-aware protocol design. In total, our\nheuristics link over $2.3 billion in Tornado Cash withdrawals to identifiable\ndeposits, exposing significant cracks in practical anonymity."}
{"id": "2510.08990", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.08990", "abs": "https://arxiv.org/abs/2510.08990", "authors": ["Mandira Roy", "Novarun Deb", "Nabendu Chaki", "Agostino Cortesi"], "title": "Towards a Taxonomy of Sustainability Requirements for Software Design", "comment": "Paper: 7 pages", "summary": "Software systems are a significant contributor to global sustainability\nconcerns, demanding that environmental, social, technical, and economic factors\nbe systematically addressed from the initial requirements engineering phase.\nAlthough existing research provides various sustainability requirements (SRs),\nthese contributions are often fragmented, specific to certain dimensions, or\nlimited to particular application domains, resulting in a critical lack of a\nunified, comprehensive taxonomy for the software engineering community. To\naddress this gap, this research conducts a Systematic Literature Review (SLR)\nto extract and organize sustainability requirements from the state-of-the-art.\nThe primary contribution is a comprehensive taxonomy of SRs across the four\ndimensions of sustainability (environmental, technical, social, and economic).\nFor each identified category, we provide clear definitions, associated metrics,\nand measures. Furthermore, we depict a correlation matrix that projects the\npositive and negative influences (synergies and conflicts) among categories\nacross different dimensions. This systematized reference assists both software\ndevelopers and researchers in effectively formulating, managing, and\nreconciling trade-offs within sustainable software development."}
{"id": "2510.08959", "categories": ["cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08959", "abs": "https://arxiv.org/abs/2510.08959", "authors": ["Jinxin Shi", "Zongsheng Cao", "Runmin Ma", "Yusong Hu", "Jie Zhou", "Xin Li", "Lei Bai", "Liang He", "Bo Zhang"], "title": "DualResearch: Entropy-Gated Dual-Graph Retrieval for Answer Reconstruction", "comment": "16 pages, 6 figures, 5 tables, Under Review", "summary": "The deep-research framework orchestrates external tools to perform complex,\nmulti-step scientific reasoning that exceeds the native limits of a single\nlarge language model. However, it still suffers from context pollution, weak\nevidentiary support, and brittle execution paths. To address these issues, we\npropose DualResearch, a retrieval and fusion framework that matches the\nepistemic structure of tool-intensive reasoning by jointly modeling two\ncomplementary graphs: a breadth semantic graph that encodes stable background\nknowledge, and a depth causal graph that captures execution provenance. Each\ngraph has a layer-native relevance function, seed-anchored semantic diffusion\nfor breadth, and causal-semantic path matching with reliability weighting for\ndepth. To reconcile their heterogeneity and query-dependent uncertainty,\nDualResearch converts per-layer path evidence into answer distributions and\nfuses them in log space via an entropy-gated rule with global calibration. The\nfusion up-weights the more certain channel and amplifies agreement. As a\ncomplement to deep-research systems, DualResearch compresses lengthy multi-tool\nexecution logs into a concise reasoning graph, and we show that it can\nreconstruct answers stably and effectively. On the scientific reasoning\nbenchmarks HLE and GPQA, DualResearch achieves competitive performance. Using\nlog files from the open-source system InternAgent, its accuracy improves by\n7.7% on HLE and 6.06% on GPQA."}
{"id": "2510.09443", "categories": ["cs.CR", "cs.SI"], "pdf": "https://arxiv.org/pdf/2510.09443", "abs": "https://arxiv.org/abs/2510.09443", "authors": ["Raffaele Cristodaro", "Benjamin Kramer", "Claudio J. Tessone"], "title": "The Impact of Sanctions on decentralised Privacy Tools: A Case Study of Tornado Cash", "comment": null, "summary": "This paper investigates the impact of sanctions on Tornado Cash, a smart\ncontract protocol designed to enhance transaction privacy. Following the U.S.\nDepartment of the Treasury's sanctions against Tornado Cash in August 2022,\nplatform activity declined sharply. We document a significant and sustained\nreduction in transaction volume, user diversity, and overall protocol\nutilization after the sanctions were imposed. Our analysis draws on transaction\ndata from three major blockchains: Ethereum, BNB Smart Chain, and Polygon. We\nfurther examine developments following the partial lifting and eventual removal\nof sanctions by the U.S. Office of Foreign Assets Control (OFAC) in March 2025.\nAlthough activity partially recovered, the rebound remained limited. The\nTornado Cash case illustrates how regulatory interventions can affect\ndecentralized protocols, while also highlighting the challenges of fully\nenforcing such measures in decentralized environments."}
{"id": "2510.08996", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08996", "abs": "https://arxiv.org/abs/2510.08996", "authors": ["Spandan Garg", "Ben Steenhoek", "Yufan Huang"], "title": "Saving SWE-Bench: A Benchmark Mutation Approach for Realistic Agent Evaluation", "comment": null, "summary": "Current benchmarks for evaluating software engineering agents, such as\nSWE-Bench Verified, are predominantly derived from GitHub issues and fail to\naccurately reflect how developers interact with chat-based coding assistants in\nintegrated development environments (IDEs). We posit that this mismatch leads\nto a systematic overestimation of agent's capabilities in real-world scenarios,\nespecially bug fixing. We introduce a novel benchmarking framework that\ntransforms existing formal benchmarks into realistic user queries through\nsystematic analysis of developer interaction patterns with chat-based agents.\nOur methodology is flexible and can be easily extended to existing benchmarks.\nIn this paper, we apply our testing framework to SWE-Bench Verified, the\nTypeScript subset of Multi-SWE-Bench and a private benchmark, SWE-Bench C# and\ntransform formal GitHub issue descriptions into realistic user-style queries\nbased on telemetry analysis of a popular chat-based agent interactions. Our\nfindings reveal that existing benchmarks significantly overestimate agent\ncapabilities for some models by >50% over baseline performance for public\nbenchmarks and ~10-16% for our internal benchmark. This work establishes a new\nparadigm for evaluating interactive chat-based software engineering agents\nthrough benchmark mutation techniques."}
{"id": "2510.08966", "categories": ["cs.AI", "cs.CL", "I.2.7"], "pdf": "https://arxiv.org/pdf/2510.08966", "abs": "https://arxiv.org/abs/2510.08966", "authors": ["Ruitong Liu", "Yan Wen", "Te Sun", "Yunjia Wu", "Pingyang Huang", "Zihang Yu", "Siyuan Li"], "title": "Semantic-Condition Tuning: Fusing Graph Context with Large Language Models for Knowledge Graph Completion", "comment": "11 pages, 3 figures, conference", "summary": "Fusing Knowledge Graphs with Large Language Models is crucial for\nknowledge-intensive tasks like knowledge graph completion. The prevailing\nparadigm, prefix-tuning, simply concatenates knowledge embeddings with text\ninputs. However, this shallow fusion overlooks the rich relational semantics\nwithin KGs and imposes a significant implicit reasoning burden on the LLM to\ncorrelate the prefix with the text. To address these, we propose\nSemantic-condition Tuning (SCT), a new knowledge injection paradigm comprising\ntwo key modules. First, a Semantic Graph Module employs a Graph Neural Network\nto extract a context-aware semantic condition from the local graph\nneighborhood, guided by knowledge-enhanced relations. Subsequently, this\ncondition is passed to a Condition-Adaptive Fusion Module, which, in turn,\nadaptively modulates the textual embedding via two parameterized projectors,\nenabling a deep, feature-wise, and knowledge-aware interaction. The resulting\npre-fused embedding is then fed into the LLM for fine-tuning. Extensive\nexperiments on knowledge graph benchmarks demonstrate that SCT significantly\noutperforms prefix-tuning and other strong baselines. Our analysis confirms\nthat by modulating the input representation with semantic graph context before\nLLM inference, SCT provides a more direct and potent signal, enabling more\naccurate and robust knowledge reasoning."}
{"id": "2510.09494", "categories": ["cs.CR", "cs.DB", "cs.SE"], "pdf": "https://arxiv.org/pdf/2510.09494", "abs": "https://arxiv.org/abs/2510.09494", "authors": ["Nico Bistolfi", "Andreea Georgescu", "Dave Hodson"], "title": "The Data Enclave Advantage: A New Paradigm for Least-Privileged Data Access in a Zero-Trust World", "comment": "11 pages, 2 figures, company whitepaper, no journal", "summary": "As cloud infrastructure evolves to support dynamic and distributed workflows,\naccelerated now by AI-driven processes, the outdated model of standing\npermissions has become a critical vulnerability. Based on the Cloud Security\nAlliance (CSA) Top Threats to Cloud Computing Deep Dive 2025 Report, our\nanalysis details how standing permissions cause catastrophic cloud breaches.\nWhile current security tools are addressing network and API security, the\nchallenge of securing granular data access remains. Removing standing\npermissions at the data level is as critical as it is at the network level,\nespecially for companies handling valuable data at scale.\n  In this white paper, we introduce an innovative architecture based on\non-demand data enclaves to address this gap directly. Our approach enables Zero\nStanding Privilege (ZSP) and Just-in-Time (JIT) principles at the data level.\nWe replace static permissions with temporary data contracts that enforce\nproactive protection. This means separation is built around the data requested\non-demand, providing precise access and real time monitoring for individual\nrecords instead of datasets. This solution drastically reduces the attack\nsurface, prevents privilege creep, and simplifies auditing, offering a vital\npath for enterprises to transition to a more secure and resilient data\nenvironment."}
{"id": "2510.09045", "categories": ["cs.SE", "cs.AI", "cs.IR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.09045", "abs": "https://arxiv.org/abs/2510.09045", "authors": ["Manojit Chakraborty", "Madhusudan Ghosh", "Rishabh Gupta"], "title": "Cost-Efficient Long Code Translation using LLMs while Leveraging Identifier Replacements", "comment": null, "summary": "In the domain of software development, LLMs have been utilized to automate\ntasks such as code translation, where source code from one programming language\nis translated to another while preserving its functionality. However, LLMs\noften struggle with long source codes that don't fit into the context window,\nwhich produces inaccurate translations. To address this, we propose a novel\nzero-shot code translation method that incorporates identifier replacement. By\nsubstituting user-given long identifiers with generalized placeholders during\ntranslation, our method allows the LLM to focus on the logical structure of the\ncode, by reducing token count and memory usage, which improves the efficiency\nand cost-effectiveness of long code translation. Our empirical results\ndemonstrate that our approach preserves syntactical and hierarchical\ninformation and produces translation results with reduced tokens."}
{"id": "2510.08987", "categories": ["cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08987", "abs": "https://arxiv.org/abs/2510.08987", "authors": ["Qixiang Yin", "Huanjin Yao", "Jianghao Chen", "Jiaxing Huang", "Zhicheng Zhao", "Fei Su"], "title": "Tiny-R1V: Lightweight Multimodal Unified Reasoning Model via Model Merging", "comment": "Technical report, Code will be available at\n  https://github.com/buptyqx/Tiny-R1V", "summary": "Although Multimodal Large Language Models (MLLMs) have demonstrated\nremarkable capabilities across diverse tasks, they encounter numerous\nchallenges in terms of reasoning efficiency, such as large model size,\noverthinking, and compromised accuracy in lightweight scenarios. However,\nresearch on the reasoning capabilities of lightweight MLLMs is quite lacking.\nTo this end, we propose Tiny-R1V, a novel lightweight 3B model that achieves\nfaster inference and higher accuracy via a two-stage optimization, while\nunifying multimodal reasoning across multiple tasks and using fewer tokens. In\nthe first stage, Tiny-R1V introduces Length-Informed Relative Policy\nOptimization (LIPO), a novel reinforcement learning method, to train each\nreasoning model. The LIPO is designed to dynamically adjusts advantages of\nresponses within groups, that is, by prioritizing concise yet high-quality\nresponses to encourage the generation of shorter and more accurate response. In\nthe second stage, we propose Adaptive Model Merging (AMM), a training-free\nmodel merging method that merges multiple specialist models into a unified\narchitecture. Specifically, AMM adaptively adjusts the weights of task vectors\nand robustly optimizes the merged vectors via a novel gradient projection\nregularization loss function, thus mitigating redundant conflicts between them.\nExtensive evaluations on ten widely-used reasoning benchmarks covering\nmathematics, structured data (charts, tables, documents), OCR, and general\ncapabilities showcase the superior performance of Tiny-R1V, enabling\nlightweight models to excel in diverse multimodal reasoning tasks."}
{"id": "2510.08609", "categories": ["cs.SE", "cs.CR", "cs.LG", "cs.PL"], "pdf": "https://arxiv.org/pdf/2510.08609", "abs": "https://arxiv.org/abs/2510.08609", "authors": ["Imranur Rahman", "Jill Marley", "William Enck", "Laurie Williams"], "title": "Which Is Better For Reducing Outdated and Vulnerable Dependencies: Pinning or Floating?", "comment": "Accepted to ASE 2025", "summary": "Developers consistently use version constraints to specify acceptable\nversions of the dependencies for their project. \\emph{Pinning} dependencies can\nreduce the likelihood of breaking changes, but comes with a cost of manually\nmanaging the replacement of outdated and vulnerable dependencies. On the other\nhand, \\emph{floating} can be used to automatically get bug fixes and security\nfixes, but comes with the risk of breaking changes. Security practitioners\nadvocate \\emph{pinning} dependencies to prevent against software supply chain\nattacks, e.g., malicious package updates. However, since \\emph{pinning} is the\ntightest version constraint, \\emph{pinning} is the most likely to result in\noutdated dependencies. Nevertheless, how the likelihood of becoming outdated or\nvulnerable dependencies changes across version constraint types is unknown. The\ngoal of this study is to aid developers in making an informed dependency\nversion constraint choice by empirically evaluating the likelihood of\ndependencies becoming outdated or vulnerable across version constraint types at\nscale. In this study, we first identify the trends in dependency version\nconstraint usage and the patterns of version constraint type changes made by\ndevelopers in the npm, PyPI, and Cargo ecosystems. We then modeled the\ndependency state transitions using survival analysis and estimated how the\nlikelihood of becoming outdated or vulnerable changes when using \\emph{pinning}\nas opposed to the rest of the version constraint types. We observe that among\noutdated and vulnerable dependencies, the most commonly used version constraint\ntype is \\emph{floating-minor}, with \\emph{pinning} being the next most common.\nWe also find that \\emph{floating-major} is the least likely to result in\noutdated and \\emph{floating-minor} is the least likely to result in vulnerable\ndependencies."}
{"id": "2510.09058", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.09058", "abs": "https://arxiv.org/abs/2510.09058", "authors": ["Italo Santos", "Cleyton Magalhaes", "Ronnie de Souza Santos"], "title": "Model-Assisted and Human-Guided: Perceptions and Practices of Software Professionals Using LLMs for Coding", "comment": null, "summary": "Large Language Models have quickly become a central component of modern\nsoftware development workflows, and software practitioners are increasingly\nintegrating LLMs into various stages of the software development lifecycle.\nDespite the growing presence of LLMs, there is still a limited understanding of\nhow these tools are actually used in practice and how professionals perceive\ntheir benefits and limitations. This paper presents preliminary findings from a\nglobal survey of 131 software practitioners. Our results reveal how LLMs are\nutilized for various coding-specific tasks. Software professionals report\nbenefits such as increased productivity, reduced cognitive load, and faster\nlearning, but also raise concerns about LLMs' inaccurate outputs, limited\ncontext awareness, and associated ethical risks. Most developers treat LLMs as\nassistive tools rather than standalone solutions, reflecting a cautious yet\npractical approach to their integration. Our findings provide an early,\npractitioner-focused perspective on LLM adoption, highlighting key\nconsiderations for future research and responsible use in software engineering."}
{"id": "2510.09011", "categories": ["cs.AI", "cs.CL"], "pdf": "https://arxiv.org/pdf/2510.09011", "abs": "https://arxiv.org/abs/2510.09011", "authors": ["Yincen Qu", "Huan Xiao", "Feng Li", "Hui Zhou", "Xiangying Dai"], "title": "TripScore: Benchmarking and rewarding real-world travel planning with fine-grained evaluation", "comment": null, "summary": "Travel planning is a valuable yet complex task that poses significant\nchallenges even for advanced large language models (LLMs). While recent\nbenchmarks have advanced in evaluating LLMs' planning capabilities, they often\nfall short in evaluating feasibility, reliability, and engagement of travel\nplans. We introduce a comprehensive benchmark for travel planning that unifies\nfine-grained criteria into a single reward, enabling direct comparison of plan\nquality and seamless integration with reinforcement learning (RL). Our\nevaluator achieves moderate agreement with travel-expert annotations (60.75\\%)\nand outperforms multiple LLM-as-judge baselines. We further release a\nlarge-scale dataset of 4,870 queries including 219 real-world, free-form\nrequests for generalization to authentic user intent. Using this benchmark, we\nconduct extensive experiments across diverse methods and LLMs, including\ntest-time computation, neuro-symbolic approaches, supervised fine-tuning, and\nRL via GRPO. Across base models, RL generally improves itinerary feasibility\nover prompt-only and supervised baselines, yielding higher unified reward\nscores."}
{"id": "2510.09073", "categories": ["cs.SE", "cs.PL"], "pdf": "https://arxiv.org/pdf/2510.09073", "abs": "https://arxiv.org/abs/2510.09073", "authors": ["Matthew Sotoudeh"], "title": "Literate Tracing", "comment": "examples at https://lair.masot.net/trex . SPLASH Onward 2025", "summary": "As computer systems grow ever larger and more complex, a crucial task in\nsoftware development is for one person (the system expert) to communicate to\nanother (the system novice) how a certain program works. This paper reports on\nthe author's experiences with a paradigm for program documentation that we call\nliterate tracing. A literate trace explains a software system using annotated,\nconcrete execution traces of the system. Literate traces complement both\nin-code comments (which often lack global context) and out-of-band design docs\n(which often lack a concrete connection to the code). We also describe TReX,\nour tool for making literate traces that are interactive, visual, and\nguaranteed by construction to be faithful to the program semantics. We have\nused TReX to write literate traces explaining components of large systems\nsoftware including the Linux kernel, Git source control system, and GCC\ncompiler."}
{"id": "2510.09021", "categories": ["cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.09021", "abs": "https://arxiv.org/abs/2510.09021", "authors": ["Hamed Mahdavi", "Pouria Mahdavinia", "Samira Malek", "Pegah Mohammadipour", "Alireza Hashemi", "Majid Daliri", "Alireza Farhadi", "Amir Khasahmadi", "Niloofar Mireshghallah", "Vasant Honavar"], "title": "RefGrader: Automated Grading of Mathematical Competition Proofs using Agentic Workflows", "comment": null, "summary": "State-of-the-art (SOTA) LLMs have progressed from struggling on proof-based\nOlympiad problems to solving most of the IMO 2025 problems, with leading\nsystems reportedly handling 5 of 6 problems. Given this progress, we assess how\nwell these models can grade proofs: detecting errors, judging their severity,\nand assigning fair scores beyond binary correctness. We study proof-analysis\ncapabilities using a corpus of 90 Gemini 2.5 Pro-generated solutions that we\ngrade on a 1-4 scale with detailed error annotations, and on MathArena solution\nsets for IMO/USAMO 2025 scored on a 0-7 scale. Our analysis shows that models\ncan reliably flag incorrect (including subtly incorrect) solutions but exhibit\ncalibration gaps in how partial credit is assigned. To address this, we\nintroduce agentic workflows that extract and analyze reference solutions and\nautomatically derive problem-specific rubrics for a multi-step grading process.\nWe instantiate and compare different design choices for the grading workflows,\nand evaluate their trade-offs. Across our annotated corpus and MathArena, our\nproposed workflows achieve higher agreement with human grades and more\nconsistent handling of partial credit across metrics. We release all code,\ndata, and prompts/logs to facilitate future research."}
{"id": "2510.09108", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.09108", "abs": "https://arxiv.org/abs/2510.09108", "authors": ["Lukas Krodinger", "Altin Hajdari", "Stephan Lukasczyk", "Gordon Fraser"], "title": "Constraint-Guided Unit Test Generation for Machine Learning Libraries", "comment": "Accepted for SSBSE 2025", "summary": "Machine learning (ML) libraries such as PyTorch and TensorFlow are essential\nfor a wide range of modern applications. Ensuring the correctness of ML\nlibraries through testing is crucial. However, ML APIs often impose strict\ninput constraints involving complex data structures such as tensors. Automated\ntest generation tools such as Pynguin are not aware of these constraints and\noften create non-compliant inputs. This leads to early test failures and\nlimited code coverage. Prior work has investigated extracting constraints from\nofficial API documentation. In this paper, we present PynguinML, an approach\nthat improves the Pynguin test generator to leverage these constraints to\ngenerate compliant inputs for ML APIs, enabling more thorough testing and\nhigher code coverage. Our evaluation is based on 165 modules from PyTorch and\nTensorFlow, comparing PynguinML against Pynguin. The results show that\nPynguinML significantly improves test effectiveness, achieving up to 63.9 %\nhigher code coverage."}
{"id": "2510.09037", "categories": ["cs.AI", "cs.PL", "68T50", "I.2.7"], "pdf": "https://arxiv.org/pdf/2510.09037", "abs": "https://arxiv.org/abs/2510.09037", "authors": ["Sicheol Sung", "Joonghyuk Hahn", "Yo-Sub Han"], "title": "Repairing Regex Vulnerabilities via Localization-Guided Instructions", "comment": "14 pages, 4 figures, 4 tables", "summary": "Regular expressions (regexes) are foundational to modern computing for\ncritical tasks like input validation and data parsing, yet their ubiquity\nexposes systems to regular expression denial of service (ReDoS), a\nvulnerability requiring automated repair methods. Current approaches, however,\nare hampered by a trade-off. Symbolic, rule-based system are precise but fails\nto repair unseen or complex vulnerability patterns. Conversely, large language\nmodels (LLMs) possess the necessary generalizability but are unreliable for\ntasks demanding strict syntactic and semantic correctness. We resolve this\nimpasse by introducing a hybrid framework, localized regex repair (LRR),\ndesigned to harness LLM generalization while enforcing reliability. Our core\ninsight is to decouple problem identification from the repair process. First, a\ndeterministic, symbolic module localizes the precise vulnerable subpattern,\ncreating a constrained and tractable problem space. Then, the LLM invoked to\ngenerate a semantically equivalent fix for this isolated segment. This combined\narchitecture successfully resolves complex repair cases intractable for\nrule-based repair while avoiding the semantic errors of LLM-only approaches.\nOur work provides a validated methodology for solving such problems in\nautomated repair, improving the repair rate by 15.4%p over the\nstate-of-the-art. Our code is available at https://github.com/cdltlehf/LRR."}
{"id": "2510.09134", "categories": ["cs.SE", "cs.ET"], "pdf": "https://arxiv.org/pdf/2510.09134", "abs": "https://arxiv.org/abs/2510.09134", "authors": ["Amal Elgammal", "Bernd J. Kr√§mer", "Michael P. Papazoglou", "Mira Raheem"], "title": "A Semantic Framework for Patient Digital Twins in Chronic Care", "comment": "This manuscript is currently under review at Software and Systems\n  Modeling (SoSyM)", "summary": "Personalized chronic care requires the integration of multimodal health data\nto enable precise, adaptive, and preventive decision-making. Yet most current\ndigital twin (DT) applications remain organ-specific or tied to isolated data\ntypes, lacking a unified and privacy-preserving foundation. This paper\nintroduces the Patient Medical Digital Twin (PMDT), an ontology-driven in\nsilico patient framework that integrates physiological, psychosocial,\nbehavioral, and genomic information into a coherent, extensible model.\nImplemented in OWL 2.0, the PMDT ensures semantic interoperability, supports\nautomated reasoning, and enables reuse across diverse clinical contexts. Its\nontology is structured around modular Blueprints (patient, disease and\ndiagnosis, treatment and follow-up, trajectories, safety, pathways, and adverse\nevents), formalized through dedicated conceptual views. These were iteratively\nrefined and validated through expert workshops, questionnaires, and a pilot\nstudy in the EU H2020 QUALITOP project with real-world immunotherapy patients.\nEvaluation confirmed ontology coverage, reasoning correctness, usability, and\nGDPR compliance. Results demonstrate the PMDT's ability to unify heterogeneous\ndata, operationalize competency questions, and support descriptive, predictive,\nand prescriptive analytics in a federated, privacy-preserving manner. By\nbridging gaps in data fragmentation and semantic standardization, the PMDT\nprovides a validated foundation for next-generation digital health ecosystems,\ntransforming chronic care toward proactive, continuously optimized, and\nequitable management."}
{"id": "2510.09038", "categories": ["cs.AI", "cs.CL", "cs.CV", "cs.CY", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.09038", "abs": "https://arxiv.org/abs/2510.09038", "authors": ["Wenyi Wu", "Kun Zhou", "Ruoxin Yuan", "Vivian Yu", "Stephen Wang", "Zhiting Hu", "Biwei Huang"], "title": "Auto-scaling Continuous Memory for GUI Agent", "comment": null, "summary": "We study how to endow GUI agents with scalable memory that help generalize\nacross unfamiliar interfaces and long-horizon tasks. Prior GUI agents compress\npast trajectories into text tokens, which balloons context length and misses\ndecisive visual cues (e.g., exact widget size and position). We propose a\ncontinuous memory that encodes each GUI trajectory into a fixed-length sequence\nof continuous embeddings using the VLM itself as an encoder; these embeddings\nare plugged directly into the backbone's input layer, sharply reducing context\ncost while preserving fine-grained visual information. As memory size and\nretrieval depth increase, performance improves monotonically, unlike text\nmemories that degrade with long prompts. To grow memory at low cost, we\nintroduce an auto-scaling data flywheel that (i) discovers new environments via\nsearch, (ii) synthesizes tasks with an open-source VLM, (iii) rolls out\ntrajectories with the agent, and (iv) verifies success with the same VLM. Using\nthis pipeline, we collect 100k+ trajectories for about \\$4000 and fine-tune\nonly the memory encoder (LoRA on a Q-Former, 1.2\\% parameters) with 1,500\nsamples. On real-world GUI benchmarks, our memory-augmented agent consistently\nimproves success rates under long horizons and distribution shifts. Notably,\nQwen-2.5-VL-7B + continuous memory achieves performance comparable to\nstate-of-the-art closed-source models (e.g., GPT-4o, Claude-4)."}
{"id": "2510.09308", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.09308", "abs": "https://arxiv.org/abs/2510.09308", "authors": ["Mira Raheem", "Amal Elgammal", "Michael Papazoglou", "Bernd Kr√§mer", "Neamat El-Tazi"], "title": "A Model-Driven Engineering Approach to AI-Powered Healthcare Platforms", "comment": "Disclaimer: This manuscript is currently under review at * MDPI\n  Informatics*", "summary": "Artificial intelligence (AI) has the potential to transform healthcare by\nsupporting more accurate diagnoses and personalized treatments. However, its\nadoption in practice remains constrained by fragmented data sources, strict\nprivacy rules, and the technical complexity of building reliable clinical\nsystems. To address these challenges, we introduce a model driven engineering\n(MDE) framework designed specifically for healthcare AI. The framework relies\non formal metamodels, domain-specific languages (DSLs), and automated\ntransformations to move from high level specifications to running software. At\nits core is the Medical Interoperability Language (MILA), a graphical DSL that\nenables clinicians and data scientists to define queries and machine learning\npipelines using shared ontologies. When combined with a federated learning\narchitecture, MILA allows institutions to collaborate without exchanging raw\npatient data, ensuring semantic consistency across sites while preserving\nprivacy. We evaluate this approach in a multi center cancer immunotherapy\nstudy. The generated pipelines delivered strong predictive performance, with\nsupport vector machines achieving up to 98.5 percent and 98.3 percent accuracy\nin key tasks, while substantially reducing manual coding effort. These findings\nsuggest that MDE principles metamodeling, semantic integration, and automated\ncode generation can provide a practical path toward interoperable,\nreproducible, and trustworthy digital health platforms."}
{"id": "2510.09043", "categories": ["cs.AI"], "pdf": "https://arxiv.org/pdf/2510.09043", "abs": "https://arxiv.org/abs/2510.09043", "authors": ["Sang Hun Kim", "Jongmin Lee", "Dongkyu Park", "So Young Lee", "Yosep Chong"], "title": "Humanoid Artificial Consciousness Designed with Large Language Model Based on Psychoanalysis and Personality Theory", "comment": "41 pages, 6 figures. Accepted and published to Cognitive Systems\n  Research, 2025", "summary": "Human consciousness is still a concept hard to define with current scientific\nunderstanding. Although Large Language Models (LLMs) have recently demonstrated\nsignificant advancements across various domains including translation and\nsummarization, human consciousness is not something to imitate with current\nupfront technology owing to so-called hallucination. This study, therefore,\nproposes a novel approach to address these challenges by integrating\npsychoanalysis and the Myers-Briggs Type Indicator (MBTI) into constructing\nconsciousness and personality modules. We developed three artificial\nconsciousnesses (self-awareness, unconsciousness, and preconsciousness) based\non the principles of psychoanalysis. Additionally, we designed 16 characters\nwith different personalities representing the sixteen MBTI types, with several\nattributes such as needs, status, and memories. To determine if our model's\nartificial consciousness exhibits human-like cognition, we created ten distinct\nsituations considering seven attributes such as emotional understanding and\nlogical thinking. The decision-making process of artificial consciousness and\nthe final action were evaluated in three ways: survey evaluation, three-tier\nclassification via ChatGPT, and qualitative review. Both quantitative and\nqualitative analyses indicated a high likelihood of well-simulated\nconsciousness, although the difference in response between different characters\nand consciousnesses was not very significant. This implies that the developed\nmodels incorporating elements of psychoanalysis and personality theory can lead\nto building a more intuitive and adaptable AI system with humanoid\nconsciousness. Therefore, this study contributes to opening up new avenues for\nimproving AI interactions in complex cognitive contexts."}
{"id": "2510.09400", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.09400", "abs": "https://arxiv.org/abs/2510.09400", "authors": ["He Jiang", "Yufu Wang", "Hao Lin", "Peiyu Zou", "Zhide Zhou", "Ang Jia", "Xiaochen Li", "Zhilei Ren"], "title": "TIT: A Tree-Structured Instruction Tuning Approach for LLM-Based Code Translation", "comment": null, "summary": "Large Language Models (LLMs) have shown strong performance in automated\nsource-to-target code translation through pretraining on extensive code\ncorpora. However, mainstream LLM-based code translation methods suffer from two\ncritical limitations. First, they are highly sensitive to language-specific\nfeatures, which often introduce source-language syntax or lexicon into the\noutput, leading to syntactic confusion. Second, they lack fine-grained semantic\nalignment due to an over-reliance on function-level parallel datasets,\nresulting in semantic misalignment between the translated code and the original\nsource. To overcome these limitations, we propose TIT, a Tree-structured\nInstruction Tuning paradigm for LLM-based code translation. Specifically, TIT\nconsists of three modules. First, to mitigate syntactic confusion, the\nsyntactic information representation module integrates language-agnostic\nsyntactic features via structured parsing. Then, to generate high-quality\nfine-grained parallel data, the fine-grained parallel dataset augmentation\nmodule aligns nodes with code segments through statement-level segmentation and\ncontrastive matching. Finally, we leverage the dual-stage tree instruction\ntuning module to alleviate the contextual processing burden on the LLM caused\nby the introduction of syntactic information. The first stage employs\nsyntax-aware fine-tuning to enable the LLM to autonomously comprehend\nstructured syntactic information, while the second stage utilizes code\ngeneration fine-tuning to guide the model in generating accurate target code\nbased on function-level syntactic dependencies. The experimental results\ndemonstrate that the proposed method significantly outperforms existing\napproaches in multiple LLMs, achieving a success rate 1.22x-1.75x higher in\ncode translation while markedly reducing syntactic confusion."}
{"id": "2510.09049", "categories": ["cs.AI", "cs.SE", "68T50", "I.2.7"], "pdf": "https://arxiv.org/pdf/2510.09049", "abs": "https://arxiv.org/abs/2510.09049", "authors": ["Joonghyuk Hahn", "Soohan Lim", "Yo-Sub Han"], "title": "MEC$^3$O: Multi-Expert Consensus for Code Time Complexity Prediction", "comment": "24 pages, 11 figures, 10 tables", "summary": "Predicting the complexity of source code is essential for software\ndevelopment and algorithm analysis. Recently, Baik et al. (2025) introduced\nCodeComplex for code time complexity prediction. The paper shows that LLMs\nwithout fine-tuning struggle with certain complexity classes. This suggests\nthat no single LLM excels at every class, but rather each model shows\nadvantages in certain classes. We propose MEC$^3$O, a multi-expert consensus\nsystem, which extends the multi-agent debate frameworks. MEC$^3$O assigns LLMs\nto complexity classes based on their performance and provides them with\nclass-specialized instructions, turning them into experts. These experts engage\nin structured debates, and their predictions are integrated through a weighted\nconsensus mechanism. Our expertise assignments to LLMs effectively handle\nDegeneration-of-Thought, reducing reliance on a separate judge model, and\npreventing convergence to incorrect majority opinions. Experiments on\nCodeComplex show that MEC$^3$O outperforms the open-source baselines, achieving\nat least 10% higher accuracy and macro-F1 scores. It also surpasses GPT-4o-mini\nin macro-F1 scores on average and demonstrates competitive on-par F1 scores to\nGPT-4o and GPT-o4-mini on average. This demonstrates the effectiveness of\nmulti-expert debates and weight consensus strategy to generate the final\npredictions. Our code and data is available at\nhttps://github.com/suhanmen/MECO."}
{"id": "2510.09049", "categories": ["cs.AI", "cs.SE", "68T50", "I.2.7"], "pdf": "https://arxiv.org/pdf/2510.09049", "abs": "https://arxiv.org/abs/2510.09049", "authors": ["Joonghyuk Hahn", "Soohan Lim", "Yo-Sub Han"], "title": "MEC$^3$O: Multi-Expert Consensus for Code Time Complexity Prediction", "comment": "24 pages, 11 figures, 10 tables", "summary": "Predicting the complexity of source code is essential for software\ndevelopment and algorithm analysis. Recently, Baik et al. (2025) introduced\nCodeComplex for code time complexity prediction. The paper shows that LLMs\nwithout fine-tuning struggle with certain complexity classes. This suggests\nthat no single LLM excels at every class, but rather each model shows\nadvantages in certain classes. We propose MEC$^3$O, a multi-expert consensus\nsystem, which extends the multi-agent debate frameworks. MEC$^3$O assigns LLMs\nto complexity classes based on their performance and provides them with\nclass-specialized instructions, turning them into experts. These experts engage\nin structured debates, and their predictions are integrated through a weighted\nconsensus mechanism. Our expertise assignments to LLMs effectively handle\nDegeneration-of-Thought, reducing reliance on a separate judge model, and\npreventing convergence to incorrect majority opinions. Experiments on\nCodeComplex show that MEC$^3$O outperforms the open-source baselines, achieving\nat least 10% higher accuracy and macro-F1 scores. It also surpasses GPT-4o-mini\nin macro-F1 scores on average and demonstrates competitive on-par F1 scores to\nGPT-4o and GPT-o4-mini on average. This demonstrates the effectiveness of\nmulti-expert debates and weight consensus strategy to generate the final\npredictions. Our code and data is available at\nhttps://github.com/suhanmen/MECO."}
{"id": "2510.09060", "categories": ["cs.AI", "cs.CV"], "pdf": "https://arxiv.org/pdf/2510.09060", "abs": "https://arxiv.org/abs/2510.09060", "authors": ["Jingxuan Wu", "Zhenglin Wan", "Xingrui Yu", "Yuzhe Yang", "Bo An", "Ivor Tsang"], "title": "OSCAR: Orthogonal Stochastic Control for Alignment-Respecting Diversity in Flow Matching", "comment": null, "summary": "Flow-based text-to-image models follow deterministic trajectories, forcing\nusers to repeatedly sample to discover diverse modes, which is a costly and\ninefficient process. We present a training-free, inference-time control\nmechanism that makes the flow itself diversity-aware. Our method simultaneously\nencourages lateral spread among trajectories via a feature-space objective and\nreintroduces uncertainty through a time-scheduled stochastic perturbation.\nCrucially, this perturbation is projected to be orthogonal to the generation\nflow, a geometric constraint that allows it to boost variation without\ndegrading image details or prompt fidelity. Our procedure requires no\nretraining or modification to the base sampler and is compatible with common\nflow-matching solvers. Theoretically, our method is shown to monotonically\nincrease a volume surrogate while, due to its geometric constraints,\napproximately preserving the marginal distribution. This provides a principled\nexplanation for why generation quality is robustly maintained. Empirically,\nacross multiple text-to-image settings under fixed sampling budgets, our method\nconsistently improves diversity metrics such as the Vendi Score and Brisque\nover strong baselines, while upholding image quality and alignment."}
{"id": "2510.09494", "categories": ["cs.CR", "cs.DB", "cs.SE"], "pdf": "https://arxiv.org/pdf/2510.09494", "abs": "https://arxiv.org/abs/2510.09494", "authors": ["Nico Bistolfi", "Andreea Georgescu", "Dave Hodson"], "title": "The Data Enclave Advantage: A New Paradigm for Least-Privileged Data Access in a Zero-Trust World", "comment": "11 pages, 2 figures, company whitepaper, no journal", "summary": "As cloud infrastructure evolves to support dynamic and distributed workflows,\naccelerated now by AI-driven processes, the outdated model of standing\npermissions has become a critical vulnerability. Based on the Cloud Security\nAlliance (CSA) Top Threats to Cloud Computing Deep Dive 2025 Report, our\nanalysis details how standing permissions cause catastrophic cloud breaches.\nWhile current security tools are addressing network and API security, the\nchallenge of securing granular data access remains. Removing standing\npermissions at the data level is as critical as it is at the network level,\nespecially for companies handling valuable data at scale.\n  In this white paper, we introduce an innovative architecture based on\non-demand data enclaves to address this gap directly. Our approach enables Zero\nStanding Privilege (ZSP) and Just-in-Time (JIT) principles at the data level.\nWe replace static permissions with temporary data contracts that enforce\nproactive protection. This means separation is built around the data requested\non-demand, providing precise access and real time monitoring for individual\nrecords instead of datasets. This solution drastically reduces the attack\nsurface, prevents privilege creep, and simplifies auditing, offering a vital\npath for enterprises to transition to a more secure and resilient data\nenvironment."}
{"id": "2510.09082", "categories": ["cs.AI", "cs.CY", "cs.SI", "physics.soc-ph"], "pdf": "https://arxiv.org/pdf/2510.09082", "abs": "https://arxiv.org/abs/2510.09082", "authors": ["Bicheng Wang", "Jinping Wang", "Yibo Sue"], "title": "Physics-Informed High-order Graph Dynamics Identification Learning for Predicting Complex Networks Long-term Dynamics", "comment": null, "summary": "Learning complex network dynamics is fundamental to understanding, modelling\nand controlling real-world complex systems. There are two main problems in the\ntask of predicting the dynamic evolution of complex networks: on the one hand,\nexisting methods usually use simple graphs to describe the relationships in\ncomplex networks; however, this approach can only capture pairwise\nrelationships, while there may be rich non-pairwise structured relationships in\nthe network. First-order GNNs have difficulty in capturing dynamic non-pairwise\nrelationships. On the other hand, theoretical prediction models lack accuracy\nand data-driven prediction models lack interpretability. To address the above\nproblems, this paper proposes a higher-order network dynamics identification\nmethod for long-term dynamic prediction of complex networks. Firstly, to\naddress the problem that traditional graph machine learning can only deal with\npairwise relations, dynamic hypergraph learning is introduced to capture the\nhigher-order non-pairwise relations among complex networks and improve the\naccuracy of complex network modelling. Then, a dual-driven dynamic prediction\nmodule for physical data is proposed. The Koopman operator theory is introduced\nto transform the nonlinear dynamical differential equations for the dynamic\nevolution of complex networks into linear systems for solving. Meanwhile, the\nphysical information neural differential equation method is utilised to ensure\nthat the dynamic evolution conforms to the physical laws. The dual-drive\ndynamic prediction module ensures both accuracy and interpretability of the\nprediction. Validated on public datasets and self-built industrial chain\nnetwork datasets, the experimental results show that the method in this paper\nhas good prediction accuracy and long-term prediction performance."}
{"id": "2510.09087", "categories": ["cs.AI"], "pdf": "https://arxiv.org/pdf/2510.09087", "abs": "https://arxiv.org/abs/2510.09087", "authors": ["Zhang Zheng", "Deheng Ye", "Peilin Zhao", "Hao Wang"], "title": "Leading the Follower: Learning Persuasive Agents in Social Deduction Games", "comment": null, "summary": "Large language model (LLM) agents have shown remarkable progress in social\ndeduction games (SDGs). However, existing approaches primarily focus on\ninformation processing and strategy selection, overlooking the significance of\npersuasive communication in influencing other players' beliefs and responses.\nIn SDGs, success depends not only on making correct deductions but on\nconvincing others to response in alignment with one's intent. To address this\nlimitation, we formalize turn-based dialogue in SDGs as a Stackelberg\ncompetition, where the current player acts as the leader who strategically\ninfluences the follower's response. Building on this theoretical foundation, we\npropose a reinforcement learning framework that trains agents to optimize\nutterances for persuasive impact. Through comprehensive experiments across\nthree diverse SDGs, we demonstrate that our agents significantly outperform\nbaselines. This work represents a significant step toward developing AI agents\ncapable of strategic social influence, with implications extending to scenarios\nrequiring persuasive communication."}
{"id": "2510.09133", "categories": ["cs.AI", "cs.LG", "math.ST", "stat.TH"], "pdf": "https://arxiv.org/pdf/2510.09133", "abs": "https://arxiv.org/abs/2510.09133", "authors": ["Hao Zeng", "Jianguo Huang", "Bingyi Jing", "Hongxin Wei", "Bo An"], "title": "PAC Reasoning: Controlling the Performance Loss for Efficient Reasoning", "comment": null, "summary": "Large reasoning models (LRMs) have achieved remarkable progress in complex\nproblem-solving tasks. Despite this success, LRMs typically suffer from high\ncomputational costs during deployment, highlighting a need for efficient\ninference. A popular direction of efficiency improvement is to switch the LRM\nbetween thinking and nonthinking modes dynamically. However, such approaches\noften introduce additional reasoning errors and lack statistical guarantees for\nthe performance loss, which are critical for high-stakes applications. In this\nwork, we propose Probably Approximately Correct (PAC) reasoning that controls\nthe performance loss under the user-specified performance loss tolerance. In\nparticular, we construct an upper confidence bound on the performance loss,\nformulated as a monotone function of the uncertainty score, and subsequently\ndetermine a threshold for switching to the nonthinking model. Theoretically,\nusing the threshold to switch between the thinking and nonthinking modes\nensures bounded performance loss in a distribution-free manner. Our\ncomprehensive experiments on reasoning benchmarks show that the proposed method\ncan save computational budgets and control the user-specified performance loss."}
{"id": "2510.09162", "categories": ["cs.AI", "cs.CY"], "pdf": "https://arxiv.org/pdf/2510.09162", "abs": "https://arxiv.org/abs/2510.09162", "authors": ["Emma Kondrup", "Anne Imouza"], "title": "Dr. Bias: Social Disparities in AI-Powered Medical Guidance", "comment": null, "summary": "With the rapid progress of Large Language Models (LLMs), the general public\nnow has easy and affordable access to applications capable of answering most\nhealth-related questions in a personalized manner. These LLMs are increasingly\nproving to be competitive, and now even surpass professionals in some medical\ncapabilities. They hold particular promise in low-resource settings,\nconsidering they provide the possibility of widely accessible, quasi-free\nhealthcare support. However, evaluations that fuel these motivations highly\nlack insights into the social nature of healthcare, oblivious to health\ndisparities between social groups and to how bias may translate into\nLLM-generated medical advice and impact users. We provide an exploratory\nanalysis of LLM answers to a series of medical questions spanning key clinical\ndomains, where we simulate these questions being asked by several patient\nprofiles that vary in sex, age range, and ethnicity. By comparing natural\nlanguage features of the generated responses, we show that, when LLMs are used\nfor medical advice generation, they generate responses that systematically\ndiffer between social groups. In particular, Indigenous and intersex patients\nreceive advice that is less readable and more complex. We observe these trends\namplify when intersectional groups are considered. Considering the increasing\ntrust individuals place in these models, we argue for higher AI literacy and\nfor the urgent need for investigation and mitigation by AI developers to ensure\nthese systemic differences are diminished and do not translate to unjust\npatient support. Our code is publicly available on GitHub."}
{"id": "2510.09223", "categories": ["cs.AI"], "pdf": "https://arxiv.org/pdf/2510.09223", "abs": "https://arxiv.org/abs/2510.09223", "authors": ["Mubaris Nadeem", "Madjid Fathi"], "title": "Comparing Knowledge Source Integration Methods for Optimizing Healthcare Knowledge Fusion in Rescue Operation", "comment": "Conference Paper for 2024 IEEE 7th International Conference on\n  Industrial Cyber-Physical Systems (ICPS), KIRETT Project, University of\n  Siegen, Germany", "summary": "In the field of medicine and healthcare, the utilization of medical\nexpertise, based on medical knowledge combined with patients' health\ninformation is a life-critical challenge for patients and health professionals.\nThe within-laying complexity and variety form the need for a united approach to\ngather, analyze, and utilize existing knowledge of medical treatments, and\nmedical operations to provide the ability to present knowledge for the means of\naccurate patient-driven decision-making. One way to achieve this is the fusion\nof multiple knowledge sources in healthcare. It provides health professionals\nthe opportunity to select from multiple contextual aligned knowledge sources\nwhich enables the support for critical decisions. This paper presents multiple\nconceptual models for knowledge fusion in the field of medicine, based on a\nknowledge graph structure. It will evaluate, how knowledge fusion can be\nenabled and presents how to integrate various knowledge sources into the\nknowledge graph for rescue operations."}
{"id": "2510.09227", "categories": ["cs.AI", "cs.FL"], "pdf": "https://arxiv.org/pdf/2510.09227", "abs": "https://arxiv.org/abs/2510.09227", "authors": ["Hyundong Jin", "Joonghyuk Hahn", "Yo-Sub Han"], "title": "RegexPSPACE: A Benchmark for Evaluating LLM Reasoning on PSPACE-complete Regex Problems", "comment": null, "summary": "Large language models (LLMs) show strong performance across natural language\nprocessing (NLP), mathematical reasoning, and programming, and recent large\nreasoning models (LRMs) further emphasize explicit reasoning. Yet their\ncomputational limits, particularly spatial complexity constrained by finite\ncontext windows, remain poorly understood. While recent works often focus on\nproblems within the NP complexity class, we push the boundary by introducing a\nnovel benchmark grounded in two PSPACE-complete regular expression (regex)\nproblems: equivalence decision (RegexEQ) and minimization (RegexMin).\nPSPACE-complete problems serve as a more rigorous standard for assessing\ncomputational capacity, as their solutions require massive search space\nexploration. We perform a double-exponential space exploration to construct a\nlabeled dataset of over a million regex instances with a sound filtering\nprocess to build the benchmark. We conduct extensive evaluations on 6 LLMs and\n5 LRMs of varying scales, revealing common failure patterns such as verbosity\nand repetition. With its well-defined structure and quantitative evaluation\nmetrics, this work presents the first empirical investigation into the spatial\ncomputational limitations of LLMs and LRMs, offering a new framework for\nevaluating their advanced reasoning capabilities. Our code is available at\nhttps://github.com/hyundong98/RegexPSPACE ."}
{"id": "2510.09244", "categories": ["cs.AI"], "pdf": "https://arxiv.org/pdf/2510.09244", "abs": "https://arxiv.org/abs/2510.09244", "authors": ["Victor de Lamo Castrillo", "Habtom Kahsay Gidey", "Alexander Lenz", "Alois Knoll"], "title": "Fundamentals of Building Autonomous LLM Agents", "comment": null, "summary": "This paper reviews the architecture and implementation methods of agents\npowered by large language models (LLMs). Motivated by the limitations of\ntraditional LLMs in real-world tasks, the research aims to explore patterns to\ndevelop \"agentic\" LLMs that can automate complex tasks and bridge the\nperformance gap with human capabilities. Key components include a perception\nsystem that converts environmental percepts into meaningful representations; a\nreasoning system that formulates plans, adapts to feedback, and evaluates\nactions through different techniques like Chain-of-Thought and Tree-of-Thought;\na memory system that retains knowledge through both short-term and long-term\nmechanisms; and an execution system that translates internal decisions into\nconcrete actions. This paper shows how integrating these systems leads to more\ncapable and generalized software bots that mimic human cognitive processes for\nautonomous and intelligent behavior."}
{"id": "2510.09338", "categories": ["cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.09338", "abs": "https://arxiv.org/abs/2510.09338", "authors": ["Joachim Diederich"], "title": "Localist LLMs -- A Mathematical Framework for Dynamic Locality Control", "comment": null, "summary": "We present a novel framework for training large language models with\ncontinuously adjustable internal representations that span the full spectrum\nfrom localist (interpretable, rule-based) to distributed (generalizable,\nefficient) encodings. The key innovation is a locality dial, a tunable\nparameter that dynamically controls the degree of localization during both\ntraining and inference without requiring model retraining. This is achieved\nthrough group sparsity penalties on attention mechanisms, information-theoretic\nanchor design, and dynamic rule injection. We provide rigorous mathematical\nproofs establishing explicit threshold conditions under which attention\nprovably concentrates on semantically relevant blocks, with exponential bounds\non attention entropy and pointer fidelity. Specifically, we prove that when\ngroup sparsity penalties exceed certain threshold values, the model's attention\nmechanisms concentrate on semantically relevant blocks, achieving low entropy\nand high fidelity with negligible error. This framework enables practitioners\nto continuously interpolate between interpretable and high-performance modes,\nsupporting applications in regulated domains requiring both transparency and\ncapability."}
{"id": "2510.09340", "categories": ["cs.AI", "cs.CL"], "pdf": "https://arxiv.org/pdf/2510.09340", "abs": "https://arxiv.org/abs/2510.09340", "authors": ["Davide Maltoni", "Matteo Ferrara"], "title": "Toward Mechanistic Explanation of Deductive Reasoning in Language Models", "comment": null, "summary": "Recent large language models have demonstrated relevant capabilities in\nsolving problems that require logical reasoning; however, the corresponding\ninternal mechanisms remain largely unexplored. In this paper, we show that a\nsmall language model can solve a deductive reasoning task by learning the\nunderlying rules (rather than operating as a statistical learner). A low-level\nexplanation of its internal representations and computational circuits is then\nprovided. Our findings reveal that induction heads play a central role in the\nimplementation of the rule completion and rule chaining steps involved in the\nlogical inference required by the task."}
{"id": "2510.09373", "categories": ["cs.AI"], "pdf": "https://arxiv.org/pdf/2510.09373", "abs": "https://arxiv.org/abs/2510.09373", "authors": ["Augustin Delecluse", "Pierre Schaus", "Pascal Van Hentenryck"], "title": "Sequence Variables: A Constraint Programming Computational Domain for Routing and Sequencing", "comment": null, "summary": "Constraint Programming (CP) offers an intuitive, declarative framework for\nmodeling Vehicle Routing Problems (VRP), yet classical CP models based on\nsuccessor variables cannot always deal with optional visits or insertion based\nheuristics. To address these limitations, this paper formalizes sequence\nvariables within CP. Unlike the classical successor models, this computational\ndomain handle optional visits and support insertion heuristics, including\ninsertion-based Large Neighborhood Search. We provide a clear definition of\ntheir domain, update operations, and introduce consistency levels for\nconstraints on this domain. An implementation is described with the underlying\ndata structures required for integrating sequence variables into existing\ntrail-based CP solvers. Furthermore, global constraints specifically designed\nfor sequence variables and vehicle routing are introduced. Finally, the\neffectiveness of sequence variables is demonstrated by simplifying problem\nmodeling and achieving competitive computational performance on the Dial-a-Ride\nProblem."}
{"id": "2510.09404", "categories": ["cs.AI"], "pdf": "https://arxiv.org/pdf/2510.09404", "abs": "https://arxiv.org/abs/2510.09404", "authors": ["Christian Bluethgen", "Dave Van Veen", "Daniel Truhn", "Jakob Nikolas Kather", "Michael Moor", "Malgorzata Polacin", "Akshay Chaudhari", "Thomas Frauenfelder", "Curtis P. Langlotz", "Michael Krauthammer", "Farhad Nooralahzadeh"], "title": "Agentic Systems in Radiology: Design, Applications, Evaluation, and Challenges", "comment": null, "summary": "Building agents, systems that perceive and act upon their environment with a\ndegree of autonomy, has long been a focus of AI research. This pursuit has\nrecently become vastly more practical with the emergence of large language\nmodels (LLMs) capable of using natural language to integrate information,\nfollow instructions, and perform forms of \"reasoning\" and planning across a\nwide range of tasks. With its multimodal data streams and orchestrated\nworkflows spanning multiple systems, radiology is uniquely suited to benefit\nfrom agents that can adapt to context and automate repetitive yet complex\ntasks. In radiology, LLMs and their multimodal variants have already\ndemonstrated promising performance for individual tasks such as information\nextraction and report summarization. However, using LLMs in isolation\nunderutilizes their potential to support complex, multi-step workflows where\ndecisions depend on evolving context from multiple information sources.\nEquipping LLMs with external tools and feedback mechanisms enables them to\ndrive systems that exhibit a spectrum of autonomy, ranging from semi-automated\nworkflows to more adaptive agents capable of managing complex processes. This\nreview examines the design of such LLM-driven agentic systems, highlights key\napplications, discusses evaluation methods for planning and tool use, and\noutlines challenges such as error cascades, tool-use efficiency, and health IT\nintegration."}
{"id": "2510.09551", "categories": ["cs.LG", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.09551", "abs": "https://arxiv.org/abs/2510.09551", "authors": ["Gavriel Di Nepi", "Federico Siciliano", "Fabrizio Silvestri"], "title": "Titans Revisited: A Lightweight Reimplementation and Critical Analysis of a Test-Time Memory Model", "comment": null, "summary": "By the end of 2024, Google researchers introduced Titans: Learning at Test\nTime, a neural memory model achieving strong empirical results across multiple\ntasks. However, the lack of publicly available code and ambiguities in the\noriginal description hinder reproducibility. In this work, we present a\nlightweight reimplementation of Titans and conduct a comprehensive evaluation\non Masked Language Modeling, Time Series Forecasting, and Recommendation tasks.\nOur results reveal that Titans does not always outperform established baselines\ndue to chunking. However, its Neural Memory component consistently improves\nperformance compared to attention-only models. These findings confirm the\nmodel's innovative potential while highlighting its practical limitations and\nraising questions for future research."}
{"id": "2510.09567", "categories": ["cs.AI", "cs.DB"], "pdf": "https://arxiv.org/pdf/2510.09567", "abs": "https://arxiv.org/abs/2510.09567", "authors": ["Jacopo Tagliabue", "Ciro Greco"], "title": "Safe, Untrusted, \"Proof-Carrying\" AI Agents: toward the agentic lakehouse", "comment": "IEEE Big Data, Workshop on Secure and Safe AI Agents for Big Data\n  Infrastructures", "summary": "Data lakehouses run sensitive workloads, where AI-driven automation raises\nconcerns about trust, correctness, and governance. We argue that API-first,\nprogrammable lakehouses provide the right abstractions for safe-by-design,\nagentic workflows. Using Bauplan as a case study, we show how data branching\nand declarative environments extend naturally to agents, enabling\nreproducibility and observability while reducing the attack surface. We present\na proof-of-concept in which agents repair data pipelines using correctness\nchecks inspired by proof-carrying code. Our prototype demonstrates that\nuntrusted AI agents can operate safely on production data and outlines a path\ntoward a fully agentic lakehouse."}
{"id": "2510.09580", "categories": ["cs.AI", "cs.CL"], "pdf": "https://arxiv.org/pdf/2510.09580", "abs": "https://arxiv.org/abs/2510.09580", "authors": ["Margarita Belova", "Jiaxin Xiao", "Shikhar Tuli", "Niraj K. Jha"], "title": "GraphMERT: Efficient and Scalable Distillation of Reliable Knowledge Graphs from Unstructured Data", "comment": null, "summary": "Researchers have pursued neurosymbolic artificial intelligence (AI)\napplications for nearly three decades because symbolic components provide\nabstraction while neural components provide generalization. Thus, a marriage of\nthe two components can lead to rapid advancements in AI. Yet, the field has not\nrealized this promise since most neurosymbolic AI frameworks fail to scale. In\naddition, the implicit representations and approximate reasoning of neural\napproaches limit interpretability and trust. Knowledge graphs (KGs), a\ngold-standard representation of explicit semantic knowledge, can address the\nsymbolic side. However, automatically deriving reliable KGs from text corpora\nhas remained an open problem. We address these challenges by introducing\nGraphMERT, a tiny graphical encoder-only model that distills high-quality KGs\nfrom unstructured text corpora and its own internal representations. GraphMERT\nand its equivalent KG form a modular neurosymbolic stack: neural learning of\nabstractions; symbolic KGs for verifiable reasoning. GraphMERT + KG is the\nfirst efficient and scalable neurosymbolic model to achieve state-of-the-art\nbenchmark accuracy along with superior symbolic representations relative to\nbaselines.\n  Concretely, we target reliable domain-specific KGs that are both (1) factual\n(with provenance) and (2) valid (ontology-consistent relations with\ndomain-appropriate semantics). When a large language model (LLM), e.g.,\nQwen3-32B, generates domain-specific KGs, it falls short on reliability due to\nprompt sensitivity, shallow domain expertise, and hallucinated relations. On\ntext obtained from PubMed papers on diabetes, our 80M-parameter GraphMERT\nyields a KG with a 69.8% FActScore; a 32B-parameter baseline LLM yields a KG\nthat achieves only 40.2% FActScore. The GraphMERT KG also attains a higher\nValidityScore of 68.8%, versus 43.0% for the LLM baseline."}
{"id": "2510.09595", "categories": ["cs.AI", "cs.CL", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.09595", "abs": "https://arxiv.org/abs/2510.09595", "authors": ["Kaijian Zou", "Aaron Xiong", "Yunxiang Zhang", "Frederick Zhang", "Yueqi Ren", "Jirong Yang", "Ayoung Lee", "Shitanshu Bhushan", "Lu Wang"], "title": "LiveOIBench: Can Large Language Models Outperform Human Contestants in Informatics Olympiads?", "comment": null, "summary": "Competitive programming problems increasingly serve as valuable benchmarks to\nevaluate the coding capabilities of large language models (LLMs) due to their\ncomplexity and ease of verification. Yet, current coding benchmarks face\nlimitations such as lack of exceptionally challenging problems, insufficient\ntest case coverage, reliance on online platform APIs that limit accessibility.\nTo address these issues, we introduce LiveOIBench, a comprehensive benchmark\nfeaturing 403 expert-curated Olympiad-level competitive programming problems,\neach with an average of 60 expert-designed test cases. The problems are sourced\ndirectly from 72 official Informatics Olympiads in different regions conducted\nbetween 2023 and 2025. LiveOIBench distinguishes itself through four key\nfeatures: (1) meticulously curated high-quality tasks with detailed subtask\nrubrics and extensive private test cases; (2) direct integration of elite\ncontestant performance data to enable informative comparison against\ntop-performing humans; (3) planned continuous, contamination-free updates from\nnewly released Olympiad problems; and (4) a self-contained evaluation system\nfacilitating offline and easy-to-reproduce assessments. Benchmarking 32 popular\ngeneral-purpose and reasoning LLMs, we find that GPT-5 achieves a notable\n81.76th percentile, a strong result that nonetheless falls short of top human\ncontestant performance, who usually place above 90th. In contrast, among\nopen-weight reasoning models, GPT-OSS-120B achieves only a 60th percentile,\nunderscoring significant capability disparities from frontier closed models.\nDetailed analyses indicate that robust reasoning models prioritize precise\nproblem analysis over excessive exploration, suggesting future models should\nemphasize structured analysis and minimize unnecessary exploration. All data,\ncode, and leaderboard results will be made publicly available on our website."}
{"id": "2510.08576", "categories": ["cs.SE", "cs.AI", "cs.CL", "cs.HC"], "pdf": "https://arxiv.org/pdf/2510.08576", "abs": "https://arxiv.org/abs/2510.08576", "authors": ["Justus Flerlage", "Alexander Acker", "Odej Kao"], "title": "Comparative Analysis of Large Language Models for the Machine-Assisted Resolution of User Intentions", "comment": null, "summary": "Large Language Models (LLMs) have emerged as transformative tools for natural\nlanguage understanding and user intent resolution, enabling tasks such as\ntranslation, summarization, and, increasingly, the orchestration of complex\nworkflows. This development signifies a paradigm shift from conventional,\nGUI-driven user interfaces toward intuitive, language-first interaction\nparadigms. Rather than manually navigating applications, users can articulate\ntheir objectives in natural language, enabling LLMs to orchestrate actions\nacross multiple applications in a dynamic and contextual manner. However,\nextant implementations frequently rely on cloud-based proprietary models, which\nintroduce limitations in terms of privacy, autonomy, and scalability. For\nlanguage-first interaction to become a truly robust and trusted interface\nparadigm, local deployment is not merely a convenience; it is an imperative.\nThis limitation underscores the importance of evaluating the feasibility of\nlocally deployable, open-source, and open-access LLMs as foundational\ncomponents for future intent-based operating systems. In this study, we examine\nthe capabilities of several open-source and open-access models in facilitating\nuser intention resolution through machine assistance. A comparative analysis is\nconducted against OpenAI's proprietary GPT-4-based systems to assess\nperformance in generating workflows for various user intentions. The present\nstudy offers empirical insights into the practical viability, performance\ntrade-offs, and potential of open LLMs as autonomous, locally operable\ncomponents in next-generation operating systems. The results of this study\ninform the broader discussion on the decentralization and democratization of AI\ninfrastructure and point toward a future where user-device interaction becomes\nmore seamless, adaptive, and privacy-conscious through locally embedded\nintelligence."}
{"id": "2510.08610", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.08610", "abs": "https://arxiv.org/abs/2510.08610", "authors": ["Imranur Rahman", "Md Rayhanur Rahman"], "title": "Relative Positioning Based Code Chunking Method For Rich Context Retrieval In Repository Level Code Completion Task With Code Language Model", "comment": "Accepted to Context Collection Workshop co-located with ASE 2025", "summary": "Code completion can help developers improve efficiency and ease the\ndevelopment lifecycle. Although code completion is available in modern\nintegrated development environments (IDEs), research lacks in determining what\nmakes a good context for code completion based on the information available to\nthe IDEs for the large language models (LLMs) to perform better. In this paper,\nwe describe an effective context collection strategy to assist the LLMs in\nperforming better at code completion tasks. The key idea of our strategy is to\npreprocess the repository into smaller code chunks and later use syntactic and\nsemantic similarity-based code chunk retrieval with relative positioning. We\nfound that code chunking and relative positioning of the chunks in the final\ncontext improve the performance of code completion tasks."}
{"id": "2510.08612", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08612", "abs": "https://arxiv.org/abs/2510.08612", "authors": ["Devang Dhanuka"], "title": "Impact of LLMs on Team Collaboration in Software Development", "comment": null, "summary": "Large Language Models (LLMs) are increasingly being integrated into software\ndevelopment processes, with the potential to transform team workflows and\nproductivity. This paper investigates how LLMs affect team collaboration\nthroughout the Software Development Life Cycle (SDLC). We reframe and update a\nprior study with recent developments as of 2025, incorporating new literature\nand case studies. We outline the problem of collaboration hurdles in SDLC and\nexplore how LLMs can enhance productivity, communication, and decision-making\nin a team context. Through literature review, industry examples, a team survey,\nand two case studies, we assess the impact of LLM-assisted tools (such as code\ngeneration assistants and AI-powered project management agents) on\ncollaborative software engineering practices. Our findings indicate that LLMs\ncan significantly improve efficiency (by automating repetitive tasks and\ndocumentation), enhance communication clarity, and aid cross-functional\ncollaboration, while also introducing new challenges like model limitations and\nprivacy concerns. We discuss these benefits and challenges, present research\nquestions guiding the investigation, evaluate threats to validity, and suggest\nfuture research directions including domain-specific model customization,\nimproved integration into development tools, and robust strategies for ensuring\ntrust and security."}
{"id": "2510.08640", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08640", "abs": "https://arxiv.org/abs/2510.08640", "authors": ["Ha Min Son", "Huan Ren", "Xin Liu", "Zhe Zhao"], "title": "Automating Android Build Repair: Bridging the Reasoning-Execution Gap in LLM Agents with Domain-Specific Tools", "comment": null, "summary": "Android is the largest mobile platform, yet automatically building\napplications remains a practical challenge. While Large Language Models (LLMs)\nshow promise for code repair, their use for fixing Android build errors remains\nunderexplored. To address this gap, we first introduce AndroidBuildBench, a\nbenchmark of 1,019 build failures curated from the commit histories of 43\nopen-source Android projects. Each problem is paired with a verified solution\nfrom a subsequent commit, ensuring that fixes are feasible. Second, we propose\nGradleFixer, an LLM agent with domain-specific tools for inspecting and\nmanipulating the Gradle build environment. GradleFixer achieves a resolve rate\nof 81.4% (pass@1), significantly outperforming a state-of-the-art coding agent\nthat relies on a general-purpose shell. GradleFixer's success suggests that\nwhile LLMs possess the high-level knowledge to solve these failures, they\nstruggle to translate this knowledge into effective low-level actions using a\ngeneral-purpose shell. We demonstrate the effectiveness of a strategy we term\nTool Bridging, which replaces general-purpose shell commands with domain-aware\nabstractions. We hypothesize this approach works through two mechanisms: 1) it\nprovides tools in an API-like format that LLMs use more reliably, and 2) it\nconstrains the action space to relevant operations. This approach bridges the\ngap between the model's high-level reasoning and effective low-level execution."}
{"id": "2510.08664", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08664", "abs": "https://arxiv.org/abs/2510.08664", "authors": ["Jianan Mu", "Mingyu Shi", "Yining Wang", "Tianmeng Yang", "Bin Sun", "Xing Hu", "Jing Ye", "Huawei Li"], "title": "Faver: Boosting LLM-based RTL Generation with Function Abstracted Verifiable Middleware", "comment": null, "summary": "LLM-based RTL generation is an interesting research direction, as it holds\nthe potential to liberate the least automated stage in the current chip design.\nHowever, due to the substantial semantic gap between high-level specifications\nand RTL, coupled with limited training data, existing models struggle with\ngeneration accuracy. Drawing on human experience, design with verification\nhelps improving accuracy. However, as the RTL testbench data are even more\nscarce, it is not friendly for LLMs. Although LLMs excel at higher-level\nlanguages like Python/C, they have a huge semantic gap from RTL. When\nimplementing the same functionality, Python/C code and hardware code differ\nsignificantly in the spatiotemporal granularity, requiring the LLM not only to\nconsider high-level functional semantics but also to ensure the low-level\ndetails align with the circuit code. It is not an easy task. In this paper, we\npropose a function abstracted verifiable middleware (Faver) that streamlines\nRTL verification in LLM-based workflows. By mixing LLM-friendly code structures\nwith a rule-based template, Faver decouples the details of circuit\nverification, allowing the LLM to focus on the functionality itself. In our\nexperiments on the SFT model and open-source models, Faver improved the model's\ngeneration accuracy by up to 14%."}
{"id": "2510.08665", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08665", "abs": "https://arxiv.org/abs/2510.08665", "authors": ["Aofan Liu", "Haoxuan Li", "Bin Wang", "Ao Yang", "Hui Li"], "title": "RA-Gen: A Controllable Code Generation Framework Using ReAct for Multi-Agent Task Execution", "comment": null, "summary": "Code generation models based on large language models (LLMs) have gained wide\nadoption, but challenges remain in ensuring safety, accuracy, and\ncontrollability, especially for complex tasks. Existing methods often lack\ndynamic integration of external tools, transparent reasoning, and user control\nover safety. To address these issues, we propose a controllable code generation\nframework utilizing the ReAct paradigm for multi-agent task execution. This\nframework is a multi-agent system designed to enable efficient, precise, and\ninterpretable code generation through dynamic interactions between LLMs and\nexternal resources. The framework adopts a collaborative architecture\ncomprising four specialized agents: a Planner for task decomposition, a\nSearcher that leverages the ReAct framework for reasoning and tool integration,\na CodeGen agent for accurate code generation, and an Extractor for structured\ndata retrieval. The ReAct-based Searcher alternates between generating\nreasoning traces and executing actions, facilitating seamless integration of\ninternal knowledge with external tools (such as search engines) to enhance\naccuracy and user control. Experimental results show the framework's\neffectiveness across multiple languages, achieving a 94.8% security rate on the\nSVEN dataset with CodeQL, outperforming existing approaches. Its transparent\nreasoning process fosters user trust and improves controllability."}
{"id": "2510.08667", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08667", "abs": "https://arxiv.org/abs/2510.08667", "authors": ["Mohammad Baqar"], "title": "RAG4Tickets: AI-Powered Ticket Resolution via Retrieval-Augmented Generation on JIRA and GitHub Data", "comment": "13 Pages", "summary": "Modern software teams frequently encounter delays in resolving recurring or\nrelated issues due to fragmented knowledge scattered across JIRA tickets,\ndeveloper discussions, and GitHub pull requests (PRs). To address this\nchallenge, we propose a Retrieval-Augmented Generation (RAG) framework that\nintegrates Sentence-Transformers for semantic embeddings with FAISS-based\nvector search to deliver context-aware ticket resolution recommendations. The\napproach embeds historical JIRA tickets, user comments, and linked PR metadata\nto retrieve semantically similar past cases, which are then synthesized by a\nLarge Language Model (LLM) into grounded and explainable resolution\nsuggestions. The framework contributes a unified pipeline linking JIRA and\nGitHub data, an embedding and FAISS indexing strategy for heterogeneous\nsoftware artifacts, and a resolution generation module guided by retrieved\nevidence. Experimental evaluation using precision, recall, resolution time\nreduction, and developer acceptance metrics shows that the proposed system\nsignificantly improves resolution accuracy, fix quality, and knowledge reuse in\nmodern DevOps environments."}
{"id": "2510.08697", "categories": ["cs.SE", "cs.AI", "cs.CL"], "pdf": "https://arxiv.org/pdf/2510.08697", "abs": "https://arxiv.org/abs/2510.08697", "authors": ["Terry Yue Zhuo", "Xiaolong Jin", "Hange Liu", "Juyong Jiang", "Tianyang Liu", "Chen Gong", "Bhupesh Bishnoi", "Vaisakhi Mishra", "Marek Suppa", "Noah Ziems", "Saiteja Utpala", "Ming Xu", "Guangyu Song", "Kaixin Li", "Yuhan Cao", "Bo Liu", "Zheng Liu", "Sabina Abdurakhmanova", "Wenhao Yu", "Mengzhao Jia", "Jihan Yao", "Kenneth Hamilton", "Kumar Shridhar", "Minh Chien Vu", "Dingmin Wang", "Jiawei Liu", "Zijian Wang", "Qian Liu", "Binyuan Hui", "Meg Risdal", "Ahsen Khaliq", "Atin Sood", "Zhenchang Xing", "Wasi Uddin Ahmad", "John Grundy", "David Lo", "Banghua Zhu", "Xiaoning Du", "Torsten Scholak", "Leandro von Werra"], "title": "BigCodeArena: Unveiling More Reliable Human Preferences in Code Generation via Execution", "comment": "Built with love by the BigCode community :)", "summary": "Crowdsourced model evaluation platforms, such as Chatbot Arena, enable\nreal-time evaluation from human perspectives to assess the quality of model\nresponses. In the coding domain, manually examining the quality of\nLLM-generated content is extremely challenging, as it requires understanding\nlong chunks of raw code and deliberately simulating code execution. To this\nend, we introduce BigCodeArena, an open human evaluation platform for code\ngeneration backed by a comprehensive and on-the-fly execution environment.\nBuilt on top of Chatbot Arena, BigCodeArena enables the execution of\nLLM-generated code and allows humans to interact with the execution process and\noutcomes. We collected over 14,000 raw code-centric conversation sessions\nacross 10 widely used LLMs, spanning 10 languages and 8 types of execution\nenvironments. Among these conversations, we identified more than 4,700\nmulti-turn samples with pairwise human preferences. Further analysis uncovers\nunderexplored preferences of LLMs in fine-grained domains characterized by\ntasks, languages, and frameworks. To systematically examine code understanding\nand generation capabilities of frontier LLMs, we curated two benchmarks based\non the collected data, namely BigCodeReward and AutoCodeArena. For\nBigCodeReward, we post-processed the 4,700 conversations and evaluated the\nconsistency between reward models and human preferences. The evaluation shows\nthat most LLMs have superior performance in judging coding preferences when the\nexecution results are available. Inspired by these findings, we propose\nAutoCodeArena, an automatic Elo rating benchmark designed to assess the coding\nquality of LLMs without human involvement. We find that proprietary LLMs like\nGPT-5, Claude-Sonnet-4, and Claude-Opus-4 still lead in code generation\nperformance among recent emerging models."}
{"id": "2510.08827", "categories": ["cs.SE", "cs.AI", "cs.CL", "cs.CY"], "pdf": "https://arxiv.org/pdf/2510.08827", "abs": "https://arxiv.org/abs/2510.08827", "authors": ["Erfan Al-Hossami", "Razvan Bunescu"], "title": "McMining: Automated Discovery of Misconceptions in Student Code", "comment": "16 pages, 8 figures", "summary": "When learning to code, students often develop misconceptions about various\nprogramming language concepts. These can not only lead to bugs or inefficient\ncode, but also slow down the learning of related concepts. In this paper, we\nintroduce McMining, the task of mining programming misconceptions from samples\nof code from a student. To enable the training and evaluation of McMining\nsystems, we develop an extensible benchmark dataset of misconceptions together\nwith a large set of code samples where these misconceptions are manifested. We\nthen introduce two LLM-based McMiner approaches and through extensive\nevaluations show that models from the Gemini, Claude, and GPT families are\neffective at discovering misconceptions in student code."}
{"id": "2510.08829", "categories": ["cs.CR", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.08829", "abs": "https://arxiv.org/abs/2510.08829", "authors": ["Debeshee Das", "Luca Beurer-Kellner", "Marc Fischer", "Maximilian Baader"], "title": "CommandSans: Securing AI Agents with Surgical Precision Prompt Sanitization", "comment": null, "summary": "The increasing adoption of LLM agents with access to numerous tools and\nsensitive data significantly widens the attack surface for indirect prompt\ninjections. Due to the context-dependent nature of attacks, however, current\ndefenses are often ill-calibrated as they cannot reliably differentiate\nmalicious and benign instructions, leading to high false positive rates that\nprevent their real-world adoption. To address this, we present a novel approach\ninspired by the fundamental principle of computer security: data should not\ncontain executable instructions. Instead of sample-level classification, we\npropose a token-level sanitization process, which surgically removes any\ninstructions directed at AI systems from tool outputs, capturing malicious\ninstructions as a byproduct. In contrast to existing safety classifiers, this\napproach is non-blocking, does not require calibration, and is agnostic to the\ncontext of tool outputs. Further, we can train such token-level predictors with\nreadily available instruction-tuning data only, and don't have to rely on\nunrealistic prompt injection examples from challenges or of other synthetic\norigin. In our experiments, we find that this approach generalizes well across\na wide range of attacks and benchmarks like AgentDojo, BIPIA, InjecAgent, ASB\nand SEP, achieving a 7-10x reduction of attack success rate (ASR) (34% to 3% on\nAgentDojo), without impairing agent utility in both benign and malicious\nsettings."}
{"id": "2510.08850", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08850", "abs": "https://arxiv.org/abs/2510.08850", "authors": ["Vasudha Yanuganti", "Ishaan Puri", "Swapnil Chhatre", "Mantinder Singh", "Ashok Jallepalli", "Hritvik Shrivastava", "Pradeep Kumar Sharma"], "title": "Repository-Aware File Path Retrieval via Fine-Tuned LLMs", "comment": null, "summary": "Modern codebases make it hard for developers and AI coding assistants to find\nthe right source files when answering questions like \"How does this feature\nwork?\" or \"Where was the bug introduced?\" Traditional code search (keyword or\nIR based) often misses semantic context and cross file links, while large\nlanguage models (LLMs) understand natural language but lack repository specific\ndetail. We present a method for file path retrieval that fine tunes a strong\nLLM (Qwen3-8B) with QLoRA and Unsloth optimizations to predict relevant file\npaths directly from a natural language query. To build training data, we\nintroduce six code aware strategies that use abstract syntax tree (AST)\nstructure and repository content to generate realistic question-answer pairs,\nwhere answers are sets of file paths. The strategies range from single file\nprompts to hierarchical repository summaries, providing broad coverage. We fine\ntune on Python projects including Flask, Click, Jinja, FastAPI, and PyTorch,\nand obtain high retrieval accuracy: up to 91\\% exact match and 93\\% recall on\nheld out queries, clearly beating single strategy training. On a large codebase\nlike PyTorch (about 4,000 Python files), the model reaches 59\\% recall, showing\nscalability. We analyze how multi level code signals help the LLM reason over\ncross file context and discuss dataset design, limits (for example, context\nlength in very large repos), and future integration of retrieval with LLM based\ncode intelligence."}
{"id": "2510.08876", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08876", "abs": "https://arxiv.org/abs/2510.08876", "authors": ["Kostiantyn Bevziuk", "Andrii Fatula", "Svetozar Lashin Yaroslav Opanasenko", "Anna Tukhtarova", "Ashok Jallepalli Pradeepkumar Sharma", "Hritvik Shrivastava"], "title": "Vector Graph-Based Repository Understanding for Issue-Driven File Retrieval", "comment": null, "summary": "We present a repository decomposition system that converts large software\nrepositories into a vectorized knowledge graph which mirrors project\narchitectural and semantic structure, capturing semantic relationships and\nallowing a significant level of automatization of further repository\ndevelopment. The graph encodes syntactic relations such as containment,\nimplementation, references, calls, and inheritance, and augments nodes with\nLLM-derived summaries and vector embeddings. A hybrid retrieval pipeline\ncombines semantic retrieval with graph-aware expansion, and an LLM-based\nassistant formulates constrained, read-only graph requests and produces\nhuman-oriented explanations."}
{"id": "2510.08981", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08981", "abs": "https://arxiv.org/abs/2510.08981", "authors": ["Mandira Roy", "Novarun Deb", "Nabendu Chaki", "Agostino Cortesi"], "title": "SEER: Sustainability Enhanced Engineering of Software Requirements", "comment": "Main Paper: 32 pages, References: 3 pages, Appendix: 13 pages.\n  Submitted to the Journal of Systems and Software, Elsevier", "summary": "The rapid expansion of software development has significant environmental,\ntechnical, social, and economic impacts. Achieving the United Nations\nSustainable Development Goals by 2030 compels developers to adopt sustainable\npractices. Existing methods mostly offer high-level guidelines, which are\ntime-consuming to implement and rely on team adaptability. Moreover, they focus\non design or implementation, while sustainability assessment should start at\nthe requirements engineering phase. In this paper, we introduce SEER, a\nframework which addresses sustainability concerns in the early software\ndevelopment phase. The framework operates in three stages: (i) it identifies\nsustainability requirements (SRs) relevant to a specific software product from\na general taxonomy; (ii) it evaluates how sustainable system requirements are\nbased on the identified SRs; and (iii) it optimizes system requirements that\nfail to satisfy any SR. The framework is implemented using the reasoning\ncapabilities of large language models and the agentic RAG (Retrieval Augmented\nGeneration) approach. SEER has been experimented on four software projects from\ndifferent domains. Results generated using Gemini 2.5 reasoning model\ndemonstrate the effectiveness of the proposed approach in accurately\nidentifying a broad range of sustainability concerns across diverse domains."}
{"id": "2510.08996", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08996", "abs": "https://arxiv.org/abs/2510.08996", "authors": ["Spandan Garg", "Ben Steenhoek", "Yufan Huang"], "title": "Saving SWE-Bench: A Benchmark Mutation Approach for Realistic Agent Evaluation", "comment": null, "summary": "Current benchmarks for evaluating software engineering agents, such as\nSWE-Bench Verified, are predominantly derived from GitHub issues and fail to\naccurately reflect how developers interact with chat-based coding assistants in\nintegrated development environments (IDEs). We posit that this mismatch leads\nto a systematic overestimation of agent's capabilities in real-world scenarios,\nespecially bug fixing. We introduce a novel benchmarking framework that\ntransforms existing formal benchmarks into realistic user queries through\nsystematic analysis of developer interaction patterns with chat-based agents.\nOur methodology is flexible and can be easily extended to existing benchmarks.\nIn this paper, we apply our testing framework to SWE-Bench Verified, the\nTypeScript subset of Multi-SWE-Bench and a private benchmark, SWE-Bench C# and\ntransform formal GitHub issue descriptions into realistic user-style queries\nbased on telemetry analysis of a popular chat-based agent interactions. Our\nfindings reveal that existing benchmarks significantly overestimate agent\ncapabilities for some models by >50% over baseline performance for public\nbenchmarks and ~10-16% for our internal benchmark. This work establishes a new\nparadigm for evaluating interactive chat-based software engineering agents\nthrough benchmark mutation techniques."}
{"id": "2510.09045", "categories": ["cs.SE", "cs.AI", "cs.IR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.09045", "abs": "https://arxiv.org/abs/2510.09045", "authors": ["Manojit Chakraborty", "Madhusudan Ghosh", "Rishabh Gupta"], "title": "Cost-Efficient Long Code Translation using LLMs while Leveraging Identifier Replacements", "comment": null, "summary": "In the domain of software development, LLMs have been utilized to automate\ntasks such as code translation, where source code from one programming language\nis translated to another while preserving its functionality. However, LLMs\noften struggle with long source codes that don't fit into the context window,\nwhich produces inaccurate translations. To address this, we propose a novel\nzero-shot code translation method that incorporates identifier replacement. By\nsubstituting user-given long identifiers with generalized placeholders during\ntranslation, our method allows the LLM to focus on the logical structure of the\ncode, by reducing token count and memory usage, which improves the efficiency\nand cost-effectiveness of long code translation. Our empirical results\ndemonstrate that our approach preserves syntactical and hierarchical\ninformation and produces translation results with reduced tokens."}
{"id": "2510.09263", "categories": ["cs.CR", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.09263", "abs": "https://arxiv.org/abs/2510.09263", "authors": ["Sven Gowal", "Rudy Bunel", "Florian Stimberg", "David Stutz", "Guillermo Ortiz-Jimenez", "Christina Kouridi", "Mel Vecerik", "Jamie Hayes", "Sylvestre-Alvise Rebuffi", "Paul Bernard", "Chris Gamble", "Mikl√≥s Z. Horv√°th", "Fabian Kaczmarczyck", "Alex Kaskasoli", "Aleksandar Petrov", "Ilia Shumailov", "Meghana Thotakuri", "Olivia Wiles", "Jessica Yung", "Zahra Ahmed", "Victor Martin", "Simon Rosen", "Christopher Savƒçak", "Armin Senoner", "Nidhi Vyas", "Pushmeet Kohli"], "title": "SynthID-Image: Image watermarking at internet scale", "comment": null, "summary": "We introduce SynthID-Image, a deep learning-based system for invisibly\nwatermarking AI-generated imagery. This paper documents the technical\ndesiderata, threat models, and practical challenges of deploying such a system\nat internet scale, addressing key requirements of effectiveness, fidelity,\nrobustness, and security. SynthID-Image has been used to watermark over ten\nbillion images and video frames across Google's services and its corresponding\nverification service is available to trusted testers. For completeness, we\npresent an experimental evaluation of an external model variant, SynthID-O,\nwhich is available through partnerships. We benchmark SynthID-O against other\npost-hoc watermarking methods from the literature, demonstrating\nstate-of-the-art performance in both visual quality and robustness to common\nimage perturbations. While this work centers on visual media, the conclusions\non deployment, constraints, and threat modeling generalize to other modalities,\nincluding audio. This paper provides a comprehensive documentation for the\nlarge-scale deployment of deep learning-based media provenance systems."}
{"id": "2510.09308", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.09308", "abs": "https://arxiv.org/abs/2510.09308", "authors": ["Mira Raheem", "Amal Elgammal", "Michael Papazoglou", "Bernd Kr√§mer", "Neamat El-Tazi"], "title": "A Model-Driven Engineering Approach to AI-Powered Healthcare Platforms", "comment": "Disclaimer: This manuscript is currently under review at * MDPI\n  Informatics*", "summary": "Artificial intelligence (AI) has the potential to transform healthcare by\nsupporting more accurate diagnoses and personalized treatments. However, its\nadoption in practice remains constrained by fragmented data sources, strict\nprivacy rules, and the technical complexity of building reliable clinical\nsystems. To address these challenges, we introduce a model driven engineering\n(MDE) framework designed specifically for healthcare AI. The framework relies\non formal metamodels, domain-specific languages (DSLs), and automated\ntransformations to move from high level specifications to running software. At\nits core is the Medical Interoperability Language (MILA), a graphical DSL that\nenables clinicians and data scientists to define queries and machine learning\npipelines using shared ontologies. When combined with a federated learning\narchitecture, MILA allows institutions to collaborate without exchanging raw\npatient data, ensuring semantic consistency across sites while preserving\nprivacy. We evaluate this approach in a multi center cancer immunotherapy\nstudy. The generated pipelines delivered strong predictive performance, with\nsupport vector machines achieving up to 98.5 percent and 98.3 percent accuracy\nin key tasks, while substantially reducing manual coding effort. These findings\nsuggest that MDE principles metamodeling, semantic integration, and automated\ncode generation can provide a practical path toward interoperable,\nreproducible, and trustworthy digital health platforms."}
